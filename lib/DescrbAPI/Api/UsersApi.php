<?php
/**
 * UsersApi
 * PHP version 7.3
 *
 * @category Class
 * @package  AkeneoPresales\DescrbAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * {descrb}
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AkeneoPresales\DescrbAPI\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use AkeneoPresales\DescrbAPI\ApiException;
use AkeneoPresales\DescrbAPI\Configuration;
use AkeneoPresales\DescrbAPI\HeaderSelector;
use AkeneoPresales\DescrbAPI\ObjectSerializer;

/**
 * UsersApi Class Doc Comment
 *
 * @category Class
 * @package  AkeneoPresales\DescrbAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class UsersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation changeUserLanguageApiV1UsersLanguagePatch
     *
     * Change User Language
     *
     * @param  string $language language (required)
     *
     * @throws \AkeneoPresales\DescrbAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AkeneoPresales\DescrbAPI\Model\User|\AkeneoPresales\DescrbAPI\Model\HTTPValidationError
     */
    public function changeUserLanguageApiV1UsersLanguagePatch($language)
    {
        list($response) = $this->changeUserLanguageApiV1UsersLanguagePatchWithHttpInfo($language);
        return $response;
    }

    /**
     * Operation changeUserLanguageApiV1UsersLanguagePatchWithHttpInfo
     *
     * Change User Language
     *
     * @param  string $language (required)
     *
     * @throws \AkeneoPresales\DescrbAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AkeneoPresales\DescrbAPI\Model\User|\AkeneoPresales\DescrbAPI\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function changeUserLanguageApiV1UsersLanguagePatchWithHttpInfo($language)
    {
        $request = $this->changeUserLanguageApiV1UsersLanguagePatchRequest($language);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\AkeneoPresales\DescrbAPI\Model\User' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AkeneoPresales\DescrbAPI\Model\User', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\AkeneoPresales\DescrbAPI\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AkeneoPresales\DescrbAPI\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AkeneoPresales\DescrbAPI\Model\User';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AkeneoPresales\DescrbAPI\Model\User',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AkeneoPresales\DescrbAPI\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation changeUserLanguageApiV1UsersLanguagePatchAsync
     *
     * Change User Language
     *
     * @param  string $language (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function changeUserLanguageApiV1UsersLanguagePatchAsync($language)
    {
        return $this->changeUserLanguageApiV1UsersLanguagePatchAsyncWithHttpInfo($language)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation changeUserLanguageApiV1UsersLanguagePatchAsyncWithHttpInfo
     *
     * Change User Language
     *
     * @param  string $language (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function changeUserLanguageApiV1UsersLanguagePatchAsyncWithHttpInfo($language)
    {
        $returnType = '\AkeneoPresales\DescrbAPI\Model\User';
        $request = $this->changeUserLanguageApiV1UsersLanguagePatchRequest($language);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'changeUserLanguageApiV1UsersLanguagePatch'
     *
     * @param  string $language (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function changeUserLanguageApiV1UsersLanguagePatchRequest($language)
    {
        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling changeUserLanguageApiV1UsersLanguagePatch'
            );
        }

        $resourcePath = '/api/v1/users/language';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($language !== null) {
            if('form' === 'form' && is_array($language)) {
                foreach($language as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['language'] = $language;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createTrialSubApiV1UsersGetTrialPatch
     *
     * Create Trial Sub
     *
     * @param  bool $pro pro (required)
     *
     * @throws \AkeneoPresales\DescrbAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed|\AkeneoPresales\DescrbAPI\Model\HTTPValidationError
     */
    public function createTrialSubApiV1UsersGetTrialPatch($pro)
    {
        list($response) = $this->createTrialSubApiV1UsersGetTrialPatchWithHttpInfo($pro);
        return $response;
    }

    /**
     * Operation createTrialSubApiV1UsersGetTrialPatchWithHttpInfo
     *
     * Create Trial Sub
     *
     * @param  bool $pro (required)
     *
     * @throws \AkeneoPresales\DescrbAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed|\AkeneoPresales\DescrbAPI\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTrialSubApiV1UsersGetTrialPatchWithHttpInfo($pro)
    {
        $request = $this->createTrialSubApiV1UsersGetTrialPatchRequest($pro);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\AkeneoPresales\DescrbAPI\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AkeneoPresales\DescrbAPI\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AkeneoPresales\DescrbAPI\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createTrialSubApiV1UsersGetTrialPatchAsync
     *
     * Create Trial Sub
     *
     * @param  bool $pro (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTrialSubApiV1UsersGetTrialPatchAsync($pro)
    {
        return $this->createTrialSubApiV1UsersGetTrialPatchAsyncWithHttpInfo($pro)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createTrialSubApiV1UsersGetTrialPatchAsyncWithHttpInfo
     *
     * Create Trial Sub
     *
     * @param  bool $pro (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTrialSubApiV1UsersGetTrialPatchAsyncWithHttpInfo($pro)
    {
        $returnType = 'mixed';
        $request = $this->createTrialSubApiV1UsersGetTrialPatchRequest($pro);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createTrialSubApiV1UsersGetTrialPatch'
     *
     * @param  bool $pro (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createTrialSubApiV1UsersGetTrialPatchRequest($pro)
    {
        // verify the required parameter 'pro' is set
        if ($pro === null || (is_array($pro) && count($pro) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pro when calling createTrialSubApiV1UsersGetTrialPatch'
            );
        }

        $resourcePath = '/api/v1/users/get-trial';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pro !== null) {
            if('form' === 'form' && is_array($pro)) {
                foreach($pro as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pro'] = $pro;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createUserApiV1UsersCreatePost
     *
     * Create User
     *
     * @param  \AkeneoPresales\DescrbAPI\Model\UserCreate $user_create user_create (required)
     *
     * @throws \AkeneoPresales\DescrbAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AkeneoPresales\DescrbAPI\Model\User|\AkeneoPresales\DescrbAPI\Model\HTTPValidationError
     */
    public function createUserApiV1UsersCreatePost($user_create)
    {
        list($response) = $this->createUserApiV1UsersCreatePostWithHttpInfo($user_create);
        return $response;
    }

    /**
     * Operation createUserApiV1UsersCreatePostWithHttpInfo
     *
     * Create User
     *
     * @param  \AkeneoPresales\DescrbAPI\Model\UserCreate $user_create (required)
     *
     * @throws \AkeneoPresales\DescrbAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AkeneoPresales\DescrbAPI\Model\User|\AkeneoPresales\DescrbAPI\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createUserApiV1UsersCreatePostWithHttpInfo($user_create)
    {
        $request = $this->createUserApiV1UsersCreatePostRequest($user_create);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\AkeneoPresales\DescrbAPI\Model\User' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AkeneoPresales\DescrbAPI\Model\User', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\AkeneoPresales\DescrbAPI\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AkeneoPresales\DescrbAPI\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AkeneoPresales\DescrbAPI\Model\User';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AkeneoPresales\DescrbAPI\Model\User',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AkeneoPresales\DescrbAPI\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createUserApiV1UsersCreatePostAsync
     *
     * Create User
     *
     * @param  \AkeneoPresales\DescrbAPI\Model\UserCreate $user_create (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createUserApiV1UsersCreatePostAsync($user_create)
    {
        return $this->createUserApiV1UsersCreatePostAsyncWithHttpInfo($user_create)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createUserApiV1UsersCreatePostAsyncWithHttpInfo
     *
     * Create User
     *
     * @param  \AkeneoPresales\DescrbAPI\Model\UserCreate $user_create (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createUserApiV1UsersCreatePostAsyncWithHttpInfo($user_create)
    {
        $returnType = '\AkeneoPresales\DescrbAPI\Model\User';
        $request = $this->createUserApiV1UsersCreatePostRequest($user_create);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createUserApiV1UsersCreatePost'
     *
     * @param  \AkeneoPresales\DescrbAPI\Model\UserCreate $user_create (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createUserApiV1UsersCreatePostRequest($user_create)
    {
        // verify the required parameter 'user_create' is set
        if ($user_create === null || (is_array($user_create) && count($user_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_create when calling createUserApiV1UsersCreatePost'
            );
        }

        $resourcePath = '/api/v1/users/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($user_create)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($user_create));
            } else {
                $httpBody = $user_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createUserProfileApiV1UsersPost
     *
     * Create User Profile
     *
     * @param  \AkeneoPresales\DescrbAPI\Model\BodyCreateUserProfileApiV1UsersPost $body_create_user_profile_api_v1_users_post body_create_user_profile_api_v1_users_post (required)
     *
     * @throws \AkeneoPresales\DescrbAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AkeneoPresales\DescrbAPI\Model\User|\AkeneoPresales\DescrbAPI\Model\HTTPValidationError
     */
    public function createUserProfileApiV1UsersPost($body_create_user_profile_api_v1_users_post)
    {
        list($response) = $this->createUserProfileApiV1UsersPostWithHttpInfo($body_create_user_profile_api_v1_users_post);
        return $response;
    }

    /**
     * Operation createUserProfileApiV1UsersPostWithHttpInfo
     *
     * Create User Profile
     *
     * @param  \AkeneoPresales\DescrbAPI\Model\BodyCreateUserProfileApiV1UsersPost $body_create_user_profile_api_v1_users_post (required)
     *
     * @throws \AkeneoPresales\DescrbAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AkeneoPresales\DescrbAPI\Model\User|\AkeneoPresales\DescrbAPI\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createUserProfileApiV1UsersPostWithHttpInfo($body_create_user_profile_api_v1_users_post)
    {
        $request = $this->createUserProfileApiV1UsersPostRequest($body_create_user_profile_api_v1_users_post);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\AkeneoPresales\DescrbAPI\Model\User' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AkeneoPresales\DescrbAPI\Model\User', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\AkeneoPresales\DescrbAPI\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AkeneoPresales\DescrbAPI\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AkeneoPresales\DescrbAPI\Model\User';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AkeneoPresales\DescrbAPI\Model\User',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AkeneoPresales\DescrbAPI\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createUserProfileApiV1UsersPostAsync
     *
     * Create User Profile
     *
     * @param  \AkeneoPresales\DescrbAPI\Model\BodyCreateUserProfileApiV1UsersPost $body_create_user_profile_api_v1_users_post (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createUserProfileApiV1UsersPostAsync($body_create_user_profile_api_v1_users_post)
    {
        return $this->createUserProfileApiV1UsersPostAsyncWithHttpInfo($body_create_user_profile_api_v1_users_post)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createUserProfileApiV1UsersPostAsyncWithHttpInfo
     *
     * Create User Profile
     *
     * @param  \AkeneoPresales\DescrbAPI\Model\BodyCreateUserProfileApiV1UsersPost $body_create_user_profile_api_v1_users_post (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createUserProfileApiV1UsersPostAsyncWithHttpInfo($body_create_user_profile_api_v1_users_post)
    {
        $returnType = '\AkeneoPresales\DescrbAPI\Model\User';
        $request = $this->createUserProfileApiV1UsersPostRequest($body_create_user_profile_api_v1_users_post);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createUserProfileApiV1UsersPost'
     *
     * @param  \AkeneoPresales\DescrbAPI\Model\BodyCreateUserProfileApiV1UsersPost $body_create_user_profile_api_v1_users_post (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createUserProfileApiV1UsersPostRequest($body_create_user_profile_api_v1_users_post)
    {
        // verify the required parameter 'body_create_user_profile_api_v1_users_post' is set
        if ($body_create_user_profile_api_v1_users_post === null || (is_array($body_create_user_profile_api_v1_users_post) && count($body_create_user_profile_api_v1_users_post) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body_create_user_profile_api_v1_users_post when calling createUserProfileApiV1UsersPost'
            );
        }

        $resourcePath = '/api/v1/users/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body_create_user_profile_api_v1_users_post)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body_create_user_profile_api_v1_users_post));
            } else {
                $httpBody = $body_create_user_profile_api_v1_users_post;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation endActiveTrialApiV1UsersEndCurrentTrialPatch
     *
     * End Active Trial
     *
     *
     * @throws \AkeneoPresales\DescrbAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed
     */
    public function endActiveTrialApiV1UsersEndCurrentTrialPatch()
    {
        list($response) = $this->endActiveTrialApiV1UsersEndCurrentTrialPatchWithHttpInfo();
        return $response;
    }

    /**
     * Operation endActiveTrialApiV1UsersEndCurrentTrialPatchWithHttpInfo
     *
     * End Active Trial
     *
     *
     * @throws \AkeneoPresales\DescrbAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed, HTTP status code, HTTP response headers (array of strings)
     */
    public function endActiveTrialApiV1UsersEndCurrentTrialPatchWithHttpInfo()
    {
        $request = $this->endActiveTrialApiV1UsersEndCurrentTrialPatchRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation endActiveTrialApiV1UsersEndCurrentTrialPatchAsync
     *
     * End Active Trial
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function endActiveTrialApiV1UsersEndCurrentTrialPatchAsync()
    {
        return $this->endActiveTrialApiV1UsersEndCurrentTrialPatchAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation endActiveTrialApiV1UsersEndCurrentTrialPatchAsyncWithHttpInfo
     *
     * End Active Trial
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function endActiveTrialApiV1UsersEndCurrentTrialPatchAsyncWithHttpInfo()
    {
        $returnType = 'mixed';
        $request = $this->endActiveTrialApiV1UsersEndCurrentTrialPatchRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'endActiveTrialApiV1UsersEndCurrentTrialPatch'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function endActiveTrialApiV1UsersEndCurrentTrialPatchRequest()
    {

        $resourcePath = '/api/v1/users/end-current-trial';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation generateReportApiV1UsersReportGet
     *
     * Generate Report
     *
     *
     * @throws \AkeneoPresales\DescrbAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed
     */
    public function generateReportApiV1UsersReportGet()
    {
        list($response) = $this->generateReportApiV1UsersReportGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation generateReportApiV1UsersReportGetWithHttpInfo
     *
     * Generate Report
     *
     *
     * @throws \AkeneoPresales\DescrbAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed, HTTP status code, HTTP response headers (array of strings)
     */
    public function generateReportApiV1UsersReportGetWithHttpInfo()
    {
        $request = $this->generateReportApiV1UsersReportGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation generateReportApiV1UsersReportGetAsync
     *
     * Generate Report
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateReportApiV1UsersReportGetAsync()
    {
        return $this->generateReportApiV1UsersReportGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation generateReportApiV1UsersReportGetAsyncWithHttpInfo
     *
     * Generate Report
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateReportApiV1UsersReportGetAsyncWithHttpInfo()
    {
        $returnType = 'mixed';
        $request = $this->generateReportApiV1UsersReportGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'generateReportApiV1UsersReportGet'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function generateReportApiV1UsersReportGetRequest()
    {

        $resourcePath = '/api/v1/users/report';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation markTrialNotificationAsSeenApiV1UsersNotificationAboutExpirePost
     *
     * Mark Trial Notification As Seen
     *
     *
     * @throws \AkeneoPresales\DescrbAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed
     */
    public function markTrialNotificationAsSeenApiV1UsersNotificationAboutExpirePost()
    {
        list($response) = $this->markTrialNotificationAsSeenApiV1UsersNotificationAboutExpirePostWithHttpInfo();
        return $response;
    }

    /**
     * Operation markTrialNotificationAsSeenApiV1UsersNotificationAboutExpirePostWithHttpInfo
     *
     * Mark Trial Notification As Seen
     *
     *
     * @throws \AkeneoPresales\DescrbAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed, HTTP status code, HTTP response headers (array of strings)
     */
    public function markTrialNotificationAsSeenApiV1UsersNotificationAboutExpirePostWithHttpInfo()
    {
        $request = $this->markTrialNotificationAsSeenApiV1UsersNotificationAboutExpirePostRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation markTrialNotificationAsSeenApiV1UsersNotificationAboutExpirePostAsync
     *
     * Mark Trial Notification As Seen
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function markTrialNotificationAsSeenApiV1UsersNotificationAboutExpirePostAsync()
    {
        return $this->markTrialNotificationAsSeenApiV1UsersNotificationAboutExpirePostAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation markTrialNotificationAsSeenApiV1UsersNotificationAboutExpirePostAsyncWithHttpInfo
     *
     * Mark Trial Notification As Seen
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function markTrialNotificationAsSeenApiV1UsersNotificationAboutExpirePostAsyncWithHttpInfo()
    {
        $returnType = 'mixed';
        $request = $this->markTrialNotificationAsSeenApiV1UsersNotificationAboutExpirePostRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'markTrialNotificationAsSeenApiV1UsersNotificationAboutExpirePost'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function markTrialNotificationAsSeenApiV1UsersNotificationAboutExpirePostRequest()
    {

        $resourcePath = '/api/v1/users/notification-about-expire';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchUserApiV1UsersPatch
     *
     * Patch User
     *
     * @param  \AkeneoPresales\DescrbAPI\Model\UserInDB $user_in_db user_in_db (required)
     *
     * @throws \AkeneoPresales\DescrbAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AkeneoPresales\DescrbAPI\Model\User|\AkeneoPresales\DescrbAPI\Model\HTTPValidationError
     */
    public function patchUserApiV1UsersPatch($user_in_db)
    {
        list($response) = $this->patchUserApiV1UsersPatchWithHttpInfo($user_in_db);
        return $response;
    }

    /**
     * Operation patchUserApiV1UsersPatchWithHttpInfo
     *
     * Patch User
     *
     * @param  \AkeneoPresales\DescrbAPI\Model\UserInDB $user_in_db (required)
     *
     * @throws \AkeneoPresales\DescrbAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AkeneoPresales\DescrbAPI\Model\User|\AkeneoPresales\DescrbAPI\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchUserApiV1UsersPatchWithHttpInfo($user_in_db)
    {
        $request = $this->patchUserApiV1UsersPatchRequest($user_in_db);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\AkeneoPresales\DescrbAPI\Model\User' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AkeneoPresales\DescrbAPI\Model\User', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\AkeneoPresales\DescrbAPI\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AkeneoPresales\DescrbAPI\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AkeneoPresales\DescrbAPI\Model\User';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AkeneoPresales\DescrbAPI\Model\User',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AkeneoPresales\DescrbAPI\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchUserApiV1UsersPatchAsync
     *
     * Patch User
     *
     * @param  \AkeneoPresales\DescrbAPI\Model\UserInDB $user_in_db (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchUserApiV1UsersPatchAsync($user_in_db)
    {
        return $this->patchUserApiV1UsersPatchAsyncWithHttpInfo($user_in_db)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchUserApiV1UsersPatchAsyncWithHttpInfo
     *
     * Patch User
     *
     * @param  \AkeneoPresales\DescrbAPI\Model\UserInDB $user_in_db (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchUserApiV1UsersPatchAsyncWithHttpInfo($user_in_db)
    {
        $returnType = '\AkeneoPresales\DescrbAPI\Model\User';
        $request = $this->patchUserApiV1UsersPatchRequest($user_in_db);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchUserApiV1UsersPatch'
     *
     * @param  \AkeneoPresales\DescrbAPI\Model\UserInDB $user_in_db (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchUserApiV1UsersPatchRequest($user_in_db)
    {
        // verify the required parameter 'user_in_db' is set
        if ($user_in_db === null || (is_array($user_in_db) && count($user_in_db) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_in_db when calling patchUserApiV1UsersPatch'
            );
        }

        $resourcePath = '/api/v1/users/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($user_in_db)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($user_in_db));
            } else {
                $httpBody = $user_in_db;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation readAllUsersApiV1UsersAllGet
     *
     * Read All Users
     *
     * @param  string $id id (optional)
     * @param  string $full_name__ilike full_name__ilike (optional)
     * @param  string $email__ilike email__ilike (optional)
     * @param  bool $is_active is_active (optional)
     * @param  string $order_by order_by (optional, default to 'full_name,email,is_active,is_superuser,count_descriptions,user_type')
     * @param  int $limit limit (optional, default to 50)
     * @param  int $offset offset (optional, default to 0)
     *
     * @throws \AkeneoPresales\DescrbAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AkeneoPresales\DescrbAPI\Model\LimitOffsetPageUser|\AkeneoPresales\DescrbAPI\Model\HTTPValidationError
     */
    public function readAllUsersApiV1UsersAllGet($id = null, $full_name__ilike = null, $email__ilike = null, $is_active = null, $order_by = 'full_name,email,is_active,is_superuser,count_descriptions,user_type', $limit = 50, $offset = 0)
    {
        list($response) = $this->readAllUsersApiV1UsersAllGetWithHttpInfo($id, $full_name__ilike, $email__ilike, $is_active, $order_by, $limit, $offset);
        return $response;
    }

    /**
     * Operation readAllUsersApiV1UsersAllGetWithHttpInfo
     *
     * Read All Users
     *
     * @param  string $id (optional)
     * @param  string $full_name__ilike (optional)
     * @param  string $email__ilike (optional)
     * @param  bool $is_active (optional)
     * @param  string $order_by (optional, default to 'full_name,email,is_active,is_superuser,count_descriptions,user_type')
     * @param  int $limit (optional, default to 50)
     * @param  int $offset (optional, default to 0)
     *
     * @throws \AkeneoPresales\DescrbAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AkeneoPresales\DescrbAPI\Model\LimitOffsetPageUser|\AkeneoPresales\DescrbAPI\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function readAllUsersApiV1UsersAllGetWithHttpInfo($id = null, $full_name__ilike = null, $email__ilike = null, $is_active = null, $order_by = 'full_name,email,is_active,is_superuser,count_descriptions,user_type', $limit = 50, $offset = 0)
    {
        $request = $this->readAllUsersApiV1UsersAllGetRequest($id, $full_name__ilike, $email__ilike, $is_active, $order_by, $limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\AkeneoPresales\DescrbAPI\Model\LimitOffsetPageUser' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AkeneoPresales\DescrbAPI\Model\LimitOffsetPageUser', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\AkeneoPresales\DescrbAPI\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AkeneoPresales\DescrbAPI\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AkeneoPresales\DescrbAPI\Model\LimitOffsetPageUser';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AkeneoPresales\DescrbAPI\Model\LimitOffsetPageUser',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AkeneoPresales\DescrbAPI\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation readAllUsersApiV1UsersAllGetAsync
     *
     * Read All Users
     *
     * @param  string $id (optional)
     * @param  string $full_name__ilike (optional)
     * @param  string $email__ilike (optional)
     * @param  bool $is_active (optional)
     * @param  string $order_by (optional, default to 'full_name,email,is_active,is_superuser,count_descriptions,user_type')
     * @param  int $limit (optional, default to 50)
     * @param  int $offset (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function readAllUsersApiV1UsersAllGetAsync($id = null, $full_name__ilike = null, $email__ilike = null, $is_active = null, $order_by = 'full_name,email,is_active,is_superuser,count_descriptions,user_type', $limit = 50, $offset = 0)
    {
        return $this->readAllUsersApiV1UsersAllGetAsyncWithHttpInfo($id, $full_name__ilike, $email__ilike, $is_active, $order_by, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation readAllUsersApiV1UsersAllGetAsyncWithHttpInfo
     *
     * Read All Users
     *
     * @param  string $id (optional)
     * @param  string $full_name__ilike (optional)
     * @param  string $email__ilike (optional)
     * @param  bool $is_active (optional)
     * @param  string $order_by (optional, default to 'full_name,email,is_active,is_superuser,count_descriptions,user_type')
     * @param  int $limit (optional, default to 50)
     * @param  int $offset (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function readAllUsersApiV1UsersAllGetAsyncWithHttpInfo($id = null, $full_name__ilike = null, $email__ilike = null, $is_active = null, $order_by = 'full_name,email,is_active,is_superuser,count_descriptions,user_type', $limit = 50, $offset = 0)
    {
        $returnType = '\AkeneoPresales\DescrbAPI\Model\LimitOffsetPageUser';
        $request = $this->readAllUsersApiV1UsersAllGetRequest($id, $full_name__ilike, $email__ilike, $is_active, $order_by, $limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'readAllUsersApiV1UsersAllGet'
     *
     * @param  string $id (optional)
     * @param  string $full_name__ilike (optional)
     * @param  string $email__ilike (optional)
     * @param  bool $is_active (optional)
     * @param  string $order_by (optional, default to 'full_name,email,is_active,is_superuser,count_descriptions,user_type')
     * @param  int $limit (optional, default to 50)
     * @param  int $offset (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function readAllUsersApiV1UsersAllGetRequest($id = null, $full_name__ilike = null, $email__ilike = null, $is_active = null, $order_by = 'full_name,email,is_active,is_superuser,count_descriptions,user_type', $limit = 50, $offset = 0)
    {
        if ($limit !== null && $limit > 100) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling UsersApi.readAllUsersApiV1UsersAllGet, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling UsersApi.readAllUsersApiV1UsersAllGet, must be bigger than or equal to 1.');
        }

        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling UsersApi.readAllUsersApiV1UsersAllGet, must be bigger than or equal to 0.');
        }


        $resourcePath = '/api/v1/users/all';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            if('form' === 'form' && is_array($id)) {
                foreach($id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['id'] = $id;
            }
        }
        // query params
        if ($full_name__ilike !== null) {
            if('form' === 'form' && is_array($full_name__ilike)) {
                foreach($full_name__ilike as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['full_name__ilike'] = $full_name__ilike;
            }
        }
        // query params
        if ($email__ilike !== null) {
            if('form' === 'form' && is_array($email__ilike)) {
                foreach($email__ilike as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['email__ilike'] = $email__ilike;
            }
        }
        // query params
        if ($is_active !== null) {
            if('form' === 'form' && is_array($is_active)) {
                foreach($is_active as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['is_active'] = $is_active;
            }
        }
        // query params
        if ($order_by !== null) {
            if('form' === 'form' && is_array($order_by)) {
                foreach($order_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['order_by'] = $order_by;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation readUserApiV1UsersGet
     *
     * Read User
     *
     *
     * @throws \AkeneoPresales\DescrbAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AkeneoPresales\DescrbAPI\Model\User
     */
    public function readUserApiV1UsersGet()
    {
        list($response) = $this->readUserApiV1UsersGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation readUserApiV1UsersGetWithHttpInfo
     *
     * Read User
     *
     *
     * @throws \AkeneoPresales\DescrbAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AkeneoPresales\DescrbAPI\Model\User, HTTP status code, HTTP response headers (array of strings)
     */
    public function readUserApiV1UsersGetWithHttpInfo()
    {
        $request = $this->readUserApiV1UsersGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\AkeneoPresales\DescrbAPI\Model\User' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AkeneoPresales\DescrbAPI\Model\User', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AkeneoPresales\DescrbAPI\Model\User';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AkeneoPresales\DescrbAPI\Model\User',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation readUserApiV1UsersGetAsync
     *
     * Read User
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function readUserApiV1UsersGetAsync()
    {
        return $this->readUserApiV1UsersGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation readUserApiV1UsersGetAsyncWithHttpInfo
     *
     * Read User
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function readUserApiV1UsersGetAsyncWithHttpInfo()
    {
        $returnType = '\AkeneoPresales\DescrbAPI\Model\User';
        $request = $this->readUserApiV1UsersGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'readUserApiV1UsersGet'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function readUserApiV1UsersGetRequest()
    {

        $resourcePath = '/api/v1/users/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation readUserApiV1UsersPaymentsInfoGet
     *
     * Read User
     *
     *
     * @throws \AkeneoPresales\DescrbAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed
     */
    public function readUserApiV1UsersPaymentsInfoGet()
    {
        list($response) = $this->readUserApiV1UsersPaymentsInfoGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation readUserApiV1UsersPaymentsInfoGetWithHttpInfo
     *
     * Read User
     *
     *
     * @throws \AkeneoPresales\DescrbAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed, HTTP status code, HTTP response headers (array of strings)
     */
    public function readUserApiV1UsersPaymentsInfoGetWithHttpInfo()
    {
        $request = $this->readUserApiV1UsersPaymentsInfoGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation readUserApiV1UsersPaymentsInfoGetAsync
     *
     * Read User
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function readUserApiV1UsersPaymentsInfoGetAsync()
    {
        return $this->readUserApiV1UsersPaymentsInfoGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation readUserApiV1UsersPaymentsInfoGetAsyncWithHttpInfo
     *
     * Read User
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function readUserApiV1UsersPaymentsInfoGetAsyncWithHttpInfo()
    {
        $returnType = 'mixed';
        $request = $this->readUserApiV1UsersPaymentsInfoGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'readUserApiV1UsersPaymentsInfoGet'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function readUserApiV1UsersPaymentsInfoGetRequest()
    {

        $resourcePath = '/api/v1/users/payments-info';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation readUserDescriptionsApiV1UsersUserIdDescriptionsGet
     *
     * Read User Descriptions
     *
     * @param  string $user_id user_id (required)
     * @param  int $score score (optional)
     * @param  string $name__ilike name__ilike (optional)
     * @param  string $brand_name__ilike brand_name__ilike (optional)
     * @param  string $order_by order_by (optional, default to 'score,name,brand_name,created_at,brand_description_bool,product_history_description_bool,technologies_bool')
     * @param  int $limit limit (optional, default to 50)
     * @param  int $offset offset (optional, default to 0)
     *
     * @throws \AkeneoPresales\DescrbAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AkeneoPresales\DescrbAPI\Model\LimitOffsetPageProductDescription|\AkeneoPresales\DescrbAPI\Model\HTTPValidationError
     */
    public function readUserDescriptionsApiV1UsersUserIdDescriptionsGet($user_id, $score = null, $name__ilike = null, $brand_name__ilike = null, $order_by = 'score,name,brand_name,created_at,brand_description_bool,product_history_description_bool,technologies_bool', $limit = 50, $offset = 0)
    {
        list($response) = $this->readUserDescriptionsApiV1UsersUserIdDescriptionsGetWithHttpInfo($user_id, $score, $name__ilike, $brand_name__ilike, $order_by, $limit, $offset);
        return $response;
    }

    /**
     * Operation readUserDescriptionsApiV1UsersUserIdDescriptionsGetWithHttpInfo
     *
     * Read User Descriptions
     *
     * @param  string $user_id (required)
     * @param  int $score (optional)
     * @param  string $name__ilike (optional)
     * @param  string $brand_name__ilike (optional)
     * @param  string $order_by (optional, default to 'score,name,brand_name,created_at,brand_description_bool,product_history_description_bool,technologies_bool')
     * @param  int $limit (optional, default to 50)
     * @param  int $offset (optional, default to 0)
     *
     * @throws \AkeneoPresales\DescrbAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AkeneoPresales\DescrbAPI\Model\LimitOffsetPageProductDescription|\AkeneoPresales\DescrbAPI\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function readUserDescriptionsApiV1UsersUserIdDescriptionsGetWithHttpInfo($user_id, $score = null, $name__ilike = null, $brand_name__ilike = null, $order_by = 'score,name,brand_name,created_at,brand_description_bool,product_history_description_bool,technologies_bool', $limit = 50, $offset = 0)
    {
        $request = $this->readUserDescriptionsApiV1UsersUserIdDescriptionsGetRequest($user_id, $score, $name__ilike, $brand_name__ilike, $order_by, $limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\AkeneoPresales\DescrbAPI\Model\LimitOffsetPageProductDescription' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AkeneoPresales\DescrbAPI\Model\LimitOffsetPageProductDescription', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\AkeneoPresales\DescrbAPI\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AkeneoPresales\DescrbAPI\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AkeneoPresales\DescrbAPI\Model\LimitOffsetPageProductDescription';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AkeneoPresales\DescrbAPI\Model\LimitOffsetPageProductDescription',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AkeneoPresales\DescrbAPI\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation readUserDescriptionsApiV1UsersUserIdDescriptionsGetAsync
     *
     * Read User Descriptions
     *
     * @param  string $user_id (required)
     * @param  int $score (optional)
     * @param  string $name__ilike (optional)
     * @param  string $brand_name__ilike (optional)
     * @param  string $order_by (optional, default to 'score,name,brand_name,created_at,brand_description_bool,product_history_description_bool,technologies_bool')
     * @param  int $limit (optional, default to 50)
     * @param  int $offset (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function readUserDescriptionsApiV1UsersUserIdDescriptionsGetAsync($user_id, $score = null, $name__ilike = null, $brand_name__ilike = null, $order_by = 'score,name,brand_name,created_at,brand_description_bool,product_history_description_bool,technologies_bool', $limit = 50, $offset = 0)
    {
        return $this->readUserDescriptionsApiV1UsersUserIdDescriptionsGetAsyncWithHttpInfo($user_id, $score, $name__ilike, $brand_name__ilike, $order_by, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation readUserDescriptionsApiV1UsersUserIdDescriptionsGetAsyncWithHttpInfo
     *
     * Read User Descriptions
     *
     * @param  string $user_id (required)
     * @param  int $score (optional)
     * @param  string $name__ilike (optional)
     * @param  string $brand_name__ilike (optional)
     * @param  string $order_by (optional, default to 'score,name,brand_name,created_at,brand_description_bool,product_history_description_bool,technologies_bool')
     * @param  int $limit (optional, default to 50)
     * @param  int $offset (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function readUserDescriptionsApiV1UsersUserIdDescriptionsGetAsyncWithHttpInfo($user_id, $score = null, $name__ilike = null, $brand_name__ilike = null, $order_by = 'score,name,brand_name,created_at,brand_description_bool,product_history_description_bool,technologies_bool', $limit = 50, $offset = 0)
    {
        $returnType = '\AkeneoPresales\DescrbAPI\Model\LimitOffsetPageProductDescription';
        $request = $this->readUserDescriptionsApiV1UsersUserIdDescriptionsGetRequest($user_id, $score, $name__ilike, $brand_name__ilike, $order_by, $limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'readUserDescriptionsApiV1UsersUserIdDescriptionsGet'
     *
     * @param  string $user_id (required)
     * @param  int $score (optional)
     * @param  string $name__ilike (optional)
     * @param  string $brand_name__ilike (optional)
     * @param  string $order_by (optional, default to 'score,name,brand_name,created_at,brand_description_bool,product_history_description_bool,technologies_bool')
     * @param  int $limit (optional, default to 50)
     * @param  int $offset (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function readUserDescriptionsApiV1UsersUserIdDescriptionsGetRequest($user_id, $score = null, $name__ilike = null, $brand_name__ilike = null, $order_by = 'score,name,brand_name,created_at,brand_description_bool,product_history_description_bool,technologies_bool', $limit = 50, $offset = 0)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling readUserDescriptionsApiV1UsersUserIdDescriptionsGet'
            );
        }
        if ($limit !== null && $limit > 100) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling UsersApi.readUserDescriptionsApiV1UsersUserIdDescriptionsGet, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling UsersApi.readUserDescriptionsApiV1UsersUserIdDescriptionsGet, must be bigger than or equal to 1.');
        }

        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling UsersApi.readUserDescriptionsApiV1UsersUserIdDescriptionsGet, must be bigger than or equal to 0.');
        }


        $resourcePath = '/api/v1/users/{user_id}/descriptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($score !== null) {
            if('form' === 'form' && is_array($score)) {
                foreach($score as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['score'] = $score;
            }
        }
        // query params
        if ($name__ilike !== null) {
            if('form' === 'form' && is_array($name__ilike)) {
                foreach($name__ilike as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['name__ilike'] = $name__ilike;
            }
        }
        // query params
        if ($brand_name__ilike !== null) {
            if('form' === 'form' && is_array($brand_name__ilike)) {
                foreach($brand_name__ilike as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['brand_name__ilike'] = $brand_name__ilike;
            }
        }
        // query params
        if ($order_by !== null) {
            if('form' === 'form' && is_array($order_by)) {
                foreach($order_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['order_by'] = $order_by;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }


        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation readUserNotReviewedDescriptionsApiV1UsersUserIdNotReviewedDescriptionsGet
     *
     * Read User Not Reviewed Descriptions
     *
     * @param  string $user_id user_id (required)
     * @param  int $limit limit (optional, default to 50)
     * @param  int $offset offset (optional, default to 0)
     *
     * @throws \AkeneoPresales\DescrbAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AkeneoPresales\DescrbAPI\Model\LimitOffsetPageProductDescriptionList|\AkeneoPresales\DescrbAPI\Model\HTTPValidationError
     */
    public function readUserNotReviewedDescriptionsApiV1UsersUserIdNotReviewedDescriptionsGet($user_id, $limit = 50, $offset = 0)
    {
        list($response) = $this->readUserNotReviewedDescriptionsApiV1UsersUserIdNotReviewedDescriptionsGetWithHttpInfo($user_id, $limit, $offset);
        return $response;
    }

    /**
     * Operation readUserNotReviewedDescriptionsApiV1UsersUserIdNotReviewedDescriptionsGetWithHttpInfo
     *
     * Read User Not Reviewed Descriptions
     *
     * @param  string $user_id (required)
     * @param  int $limit (optional, default to 50)
     * @param  int $offset (optional, default to 0)
     *
     * @throws \AkeneoPresales\DescrbAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AkeneoPresales\DescrbAPI\Model\LimitOffsetPageProductDescriptionList|\AkeneoPresales\DescrbAPI\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function readUserNotReviewedDescriptionsApiV1UsersUserIdNotReviewedDescriptionsGetWithHttpInfo($user_id, $limit = 50, $offset = 0)
    {
        $request = $this->readUserNotReviewedDescriptionsApiV1UsersUserIdNotReviewedDescriptionsGetRequest($user_id, $limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\AkeneoPresales\DescrbAPI\Model\LimitOffsetPageProductDescriptionList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AkeneoPresales\DescrbAPI\Model\LimitOffsetPageProductDescriptionList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\AkeneoPresales\DescrbAPI\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AkeneoPresales\DescrbAPI\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AkeneoPresales\DescrbAPI\Model\LimitOffsetPageProductDescriptionList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AkeneoPresales\DescrbAPI\Model\LimitOffsetPageProductDescriptionList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AkeneoPresales\DescrbAPI\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation readUserNotReviewedDescriptionsApiV1UsersUserIdNotReviewedDescriptionsGetAsync
     *
     * Read User Not Reviewed Descriptions
     *
     * @param  string $user_id (required)
     * @param  int $limit (optional, default to 50)
     * @param  int $offset (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function readUserNotReviewedDescriptionsApiV1UsersUserIdNotReviewedDescriptionsGetAsync($user_id, $limit = 50, $offset = 0)
    {
        return $this->readUserNotReviewedDescriptionsApiV1UsersUserIdNotReviewedDescriptionsGetAsyncWithHttpInfo($user_id, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation readUserNotReviewedDescriptionsApiV1UsersUserIdNotReviewedDescriptionsGetAsyncWithHttpInfo
     *
     * Read User Not Reviewed Descriptions
     *
     * @param  string $user_id (required)
     * @param  int $limit (optional, default to 50)
     * @param  int $offset (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function readUserNotReviewedDescriptionsApiV1UsersUserIdNotReviewedDescriptionsGetAsyncWithHttpInfo($user_id, $limit = 50, $offset = 0)
    {
        $returnType = '\AkeneoPresales\DescrbAPI\Model\LimitOffsetPageProductDescriptionList';
        $request = $this->readUserNotReviewedDescriptionsApiV1UsersUserIdNotReviewedDescriptionsGetRequest($user_id, $limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'readUserNotReviewedDescriptionsApiV1UsersUserIdNotReviewedDescriptionsGet'
     *
     * @param  string $user_id (required)
     * @param  int $limit (optional, default to 50)
     * @param  int $offset (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function readUserNotReviewedDescriptionsApiV1UsersUserIdNotReviewedDescriptionsGetRequest($user_id, $limit = 50, $offset = 0)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling readUserNotReviewedDescriptionsApiV1UsersUserIdNotReviewedDescriptionsGet'
            );
        }
        if ($limit !== null && $limit > 100) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling UsersApi.readUserNotReviewedDescriptionsApiV1UsersUserIdNotReviewedDescriptionsGet, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling UsersApi.readUserNotReviewedDescriptionsApiV1UsersUserIdNotReviewedDescriptionsGet, must be bigger than or equal to 1.');
        }

        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling UsersApi.readUserNotReviewedDescriptionsApiV1UsersUserIdNotReviewedDescriptionsGet, must be bigger than or equal to 0.');
        }


        $resourcePath = '/api/v1/users/{user_id}/not-reviewed-descriptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }


        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation readUserNotSeenDescriptionsApiV1UsersUserIdNotSeenDescriptionsGet
     *
     * Read User Not Seen Descriptions
     *
     * @param  string $user_id user_id (required)
     * @param  int $limit limit (optional, default to 50)
     * @param  int $offset offset (optional, default to 0)
     *
     * @throws \AkeneoPresales\DescrbAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AkeneoPresales\DescrbAPI\Model\LimitOffsetPageProductDescriptionList|\AkeneoPresales\DescrbAPI\Model\HTTPValidationError
     */
    public function readUserNotSeenDescriptionsApiV1UsersUserIdNotSeenDescriptionsGet($user_id, $limit = 50, $offset = 0)
    {
        list($response) = $this->readUserNotSeenDescriptionsApiV1UsersUserIdNotSeenDescriptionsGetWithHttpInfo($user_id, $limit, $offset);
        return $response;
    }

    /**
     * Operation readUserNotSeenDescriptionsApiV1UsersUserIdNotSeenDescriptionsGetWithHttpInfo
     *
     * Read User Not Seen Descriptions
     *
     * @param  string $user_id (required)
     * @param  int $limit (optional, default to 50)
     * @param  int $offset (optional, default to 0)
     *
     * @throws \AkeneoPresales\DescrbAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AkeneoPresales\DescrbAPI\Model\LimitOffsetPageProductDescriptionList|\AkeneoPresales\DescrbAPI\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function readUserNotSeenDescriptionsApiV1UsersUserIdNotSeenDescriptionsGetWithHttpInfo($user_id, $limit = 50, $offset = 0)
    {
        $request = $this->readUserNotSeenDescriptionsApiV1UsersUserIdNotSeenDescriptionsGetRequest($user_id, $limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\AkeneoPresales\DescrbAPI\Model\LimitOffsetPageProductDescriptionList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AkeneoPresales\DescrbAPI\Model\LimitOffsetPageProductDescriptionList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\AkeneoPresales\DescrbAPI\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AkeneoPresales\DescrbAPI\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AkeneoPresales\DescrbAPI\Model\LimitOffsetPageProductDescriptionList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AkeneoPresales\DescrbAPI\Model\LimitOffsetPageProductDescriptionList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AkeneoPresales\DescrbAPI\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation readUserNotSeenDescriptionsApiV1UsersUserIdNotSeenDescriptionsGetAsync
     *
     * Read User Not Seen Descriptions
     *
     * @param  string $user_id (required)
     * @param  int $limit (optional, default to 50)
     * @param  int $offset (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function readUserNotSeenDescriptionsApiV1UsersUserIdNotSeenDescriptionsGetAsync($user_id, $limit = 50, $offset = 0)
    {
        return $this->readUserNotSeenDescriptionsApiV1UsersUserIdNotSeenDescriptionsGetAsyncWithHttpInfo($user_id, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation readUserNotSeenDescriptionsApiV1UsersUserIdNotSeenDescriptionsGetAsyncWithHttpInfo
     *
     * Read User Not Seen Descriptions
     *
     * @param  string $user_id (required)
     * @param  int $limit (optional, default to 50)
     * @param  int $offset (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function readUserNotSeenDescriptionsApiV1UsersUserIdNotSeenDescriptionsGetAsyncWithHttpInfo($user_id, $limit = 50, $offset = 0)
    {
        $returnType = '\AkeneoPresales\DescrbAPI\Model\LimitOffsetPageProductDescriptionList';
        $request = $this->readUserNotSeenDescriptionsApiV1UsersUserIdNotSeenDescriptionsGetRequest($user_id, $limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'readUserNotSeenDescriptionsApiV1UsersUserIdNotSeenDescriptionsGet'
     *
     * @param  string $user_id (required)
     * @param  int $limit (optional, default to 50)
     * @param  int $offset (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function readUserNotSeenDescriptionsApiV1UsersUserIdNotSeenDescriptionsGetRequest($user_id, $limit = 50, $offset = 0)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling readUserNotSeenDescriptionsApiV1UsersUserIdNotSeenDescriptionsGet'
            );
        }
        if ($limit !== null && $limit > 100) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling UsersApi.readUserNotSeenDescriptionsApiV1UsersUserIdNotSeenDescriptionsGet, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling UsersApi.readUserNotSeenDescriptionsApiV1UsersUserIdNotSeenDescriptionsGet, must be bigger than or equal to 1.');
        }

        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling UsersApi.readUserNotSeenDescriptionsApiV1UsersUserIdNotSeenDescriptionsGet, must be bigger than or equal to 0.');
        }


        $resourcePath = '/api/v1/users/{user_id}/not-seen-descriptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }


        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation requestNewTotpApiV1UsersNewTotpPost
     *
     * Request New Totp
     *
     *
     * @throws \AkeneoPresales\DescrbAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AkeneoPresales\DescrbAPI\Model\NewTOTP
     */
    public function requestNewTotpApiV1UsersNewTotpPost()
    {
        list($response) = $this->requestNewTotpApiV1UsersNewTotpPostWithHttpInfo();
        return $response;
    }

    /**
     * Operation requestNewTotpApiV1UsersNewTotpPostWithHttpInfo
     *
     * Request New Totp
     *
     *
     * @throws \AkeneoPresales\DescrbAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AkeneoPresales\DescrbAPI\Model\NewTOTP, HTTP status code, HTTP response headers (array of strings)
     */
    public function requestNewTotpApiV1UsersNewTotpPostWithHttpInfo()
    {
        $request = $this->requestNewTotpApiV1UsersNewTotpPostRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\AkeneoPresales\DescrbAPI\Model\NewTOTP' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AkeneoPresales\DescrbAPI\Model\NewTOTP', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AkeneoPresales\DescrbAPI\Model\NewTOTP';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AkeneoPresales\DescrbAPI\Model\NewTOTP',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation requestNewTotpApiV1UsersNewTotpPostAsync
     *
     * Request New Totp
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function requestNewTotpApiV1UsersNewTotpPostAsync()
    {
        return $this->requestNewTotpApiV1UsersNewTotpPostAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation requestNewTotpApiV1UsersNewTotpPostAsyncWithHttpInfo
     *
     * Request New Totp
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function requestNewTotpApiV1UsersNewTotpPostAsyncWithHttpInfo()
    {
        $returnType = '\AkeneoPresales\DescrbAPI\Model\NewTOTP';
        $request = $this->requestNewTotpApiV1UsersNewTotpPostRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'requestNewTotpApiV1UsersNewTotpPost'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function requestNewTotpApiV1UsersNewTotpPostRequest()
    {

        $resourcePath = '/api/v1/users/new-totp';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation testEndpointApiV1UsersTesterGet
     *
     * Test Endpoint
     *
     *
     * @throws \AkeneoPresales\DescrbAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AkeneoPresales\DescrbAPI\Model\Msg
     */
    public function testEndpointApiV1UsersTesterGet()
    {
        list($response) = $this->testEndpointApiV1UsersTesterGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation testEndpointApiV1UsersTesterGetWithHttpInfo
     *
     * Test Endpoint
     *
     *
     * @throws \AkeneoPresales\DescrbAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AkeneoPresales\DescrbAPI\Model\Msg, HTTP status code, HTTP response headers (array of strings)
     */
    public function testEndpointApiV1UsersTesterGetWithHttpInfo()
    {
        $request = $this->testEndpointApiV1UsersTesterGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\AkeneoPresales\DescrbAPI\Model\Msg' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AkeneoPresales\DescrbAPI\Model\Msg', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AkeneoPresales\DescrbAPI\Model\Msg';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AkeneoPresales\DescrbAPI\Model\Msg',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation testEndpointApiV1UsersTesterGetAsync
     *
     * Test Endpoint
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function testEndpointApiV1UsersTesterGetAsync()
    {
        return $this->testEndpointApiV1UsersTesterGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation testEndpointApiV1UsersTesterGetAsyncWithHttpInfo
     *
     * Test Endpoint
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function testEndpointApiV1UsersTesterGetAsyncWithHttpInfo()
    {
        $returnType = '\AkeneoPresales\DescrbAPI\Model\Msg';
        $request = $this->testEndpointApiV1UsersTesterGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'testEndpointApiV1UsersTesterGet'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function testEndpointApiV1UsersTesterGetRequest()
    {

        $resourcePath = '/api/v1/users/tester';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation toggleStateApiV1UsersToggleStatePost
     *
     * Toggle State
     *
     * @param  \AkeneoPresales\DescrbAPI\Model\UserUpdate $user_update user_update (required)
     *
     * @throws \AkeneoPresales\DescrbAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AkeneoPresales\DescrbAPI\Model\Msg|\AkeneoPresales\DescrbAPI\Model\HTTPValidationError
     */
    public function toggleStateApiV1UsersToggleStatePost($user_update)
    {
        list($response) = $this->toggleStateApiV1UsersToggleStatePostWithHttpInfo($user_update);
        return $response;
    }

    /**
     * Operation toggleStateApiV1UsersToggleStatePostWithHttpInfo
     *
     * Toggle State
     *
     * @param  \AkeneoPresales\DescrbAPI\Model\UserUpdate $user_update (required)
     *
     * @throws \AkeneoPresales\DescrbAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AkeneoPresales\DescrbAPI\Model\Msg|\AkeneoPresales\DescrbAPI\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function toggleStateApiV1UsersToggleStatePostWithHttpInfo($user_update)
    {
        $request = $this->toggleStateApiV1UsersToggleStatePostRequest($user_update);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\AkeneoPresales\DescrbAPI\Model\Msg' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AkeneoPresales\DescrbAPI\Model\Msg', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\AkeneoPresales\DescrbAPI\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AkeneoPresales\DescrbAPI\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AkeneoPresales\DescrbAPI\Model\Msg';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AkeneoPresales\DescrbAPI\Model\Msg',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AkeneoPresales\DescrbAPI\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation toggleStateApiV1UsersToggleStatePostAsync
     *
     * Toggle State
     *
     * @param  \AkeneoPresales\DescrbAPI\Model\UserUpdate $user_update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toggleStateApiV1UsersToggleStatePostAsync($user_update)
    {
        return $this->toggleStateApiV1UsersToggleStatePostAsyncWithHttpInfo($user_update)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation toggleStateApiV1UsersToggleStatePostAsyncWithHttpInfo
     *
     * Toggle State
     *
     * @param  \AkeneoPresales\DescrbAPI\Model\UserUpdate $user_update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toggleStateApiV1UsersToggleStatePostAsyncWithHttpInfo($user_update)
    {
        $returnType = '\AkeneoPresales\DescrbAPI\Model\Msg';
        $request = $this->toggleStateApiV1UsersToggleStatePostRequest($user_update);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'toggleStateApiV1UsersToggleStatePost'
     *
     * @param  \AkeneoPresales\DescrbAPI\Model\UserUpdate $user_update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function toggleStateApiV1UsersToggleStatePostRequest($user_update)
    {
        // verify the required parameter 'user_update' is set
        if ($user_update === null || (is_array($user_update) && count($user_update) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_update when calling toggleStateApiV1UsersToggleStatePost'
            );
        }

        $resourcePath = '/api/v1/users/toggle-state';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($user_update)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($user_update));
            } else {
                $httpBody = $user_update;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateUserApiV1UsersPut
     *
     * Update User
     *
     * @param  bool $marketing_agreement Marketing agreement (required)
     * @param  bool $terms_agreement Terms agreement (required)
     * @param  AnyOfFileString $profile_picture Profile picture (optional)
     * @param  string $original Original password (optional, default to '')
     * @param  string $password New password (optional)
     * @param  string $full_name Full user name (optional)
     * @param  string $email User email (optional)
     *
     * @throws \AkeneoPresales\DescrbAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AkeneoPresales\DescrbAPI\Model\User|\AkeneoPresales\DescrbAPI\Model\HTTPValidationError
     */
    public function updateUserApiV1UsersPut($marketing_agreement, $terms_agreement, $profile_picture = null, $original = '', $password = null, $full_name = null, $email = null)
    {
        list($response) = $this->updateUserApiV1UsersPutWithHttpInfo($marketing_agreement, $terms_agreement, $profile_picture, $original, $password, $full_name, $email);
        return $response;
    }

    /**
     * Operation updateUserApiV1UsersPutWithHttpInfo
     *
     * Update User
     *
     * @param  bool $marketing_agreement Marketing agreement (required)
     * @param  bool $terms_agreement Terms agreement (required)
     * @param  AnyOfFileString $profile_picture Profile picture (optional)
     * @param  string $original Original password (optional, default to '')
     * @param  string $password New password (optional)
     * @param  string $full_name Full user name (optional)
     * @param  string $email User email (optional)
     *
     * @throws \AkeneoPresales\DescrbAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AkeneoPresales\DescrbAPI\Model\User|\AkeneoPresales\DescrbAPI\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateUserApiV1UsersPutWithHttpInfo($marketing_agreement, $terms_agreement, $profile_picture = null, $original = '', $password = null, $full_name = null, $email = null)
    {
        $request = $this->updateUserApiV1UsersPutRequest($marketing_agreement, $terms_agreement, $profile_picture, $original, $password, $full_name, $email);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\AkeneoPresales\DescrbAPI\Model\User' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AkeneoPresales\DescrbAPI\Model\User', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\AkeneoPresales\DescrbAPI\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AkeneoPresales\DescrbAPI\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AkeneoPresales\DescrbAPI\Model\User';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AkeneoPresales\DescrbAPI\Model\User',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AkeneoPresales\DescrbAPI\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateUserApiV1UsersPutAsync
     *
     * Update User
     *
     * @param  bool $marketing_agreement Marketing agreement (required)
     * @param  bool $terms_agreement Terms agreement (required)
     * @param  AnyOfFileString $profile_picture Profile picture (optional)
     * @param  string $original Original password (optional, default to '')
     * @param  string $password New password (optional)
     * @param  string $full_name Full user name (optional)
     * @param  string $email User email (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateUserApiV1UsersPutAsync($marketing_agreement, $terms_agreement, $profile_picture = null, $original = '', $password = null, $full_name = null, $email = null)
    {
        return $this->updateUserApiV1UsersPutAsyncWithHttpInfo($marketing_agreement, $terms_agreement, $profile_picture, $original, $password, $full_name, $email)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateUserApiV1UsersPutAsyncWithHttpInfo
     *
     * Update User
     *
     * @param  bool $marketing_agreement Marketing agreement (required)
     * @param  bool $terms_agreement Terms agreement (required)
     * @param  AnyOfFileString $profile_picture Profile picture (optional)
     * @param  string $original Original password (optional, default to '')
     * @param  string $password New password (optional)
     * @param  string $full_name Full user name (optional)
     * @param  string $email User email (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateUserApiV1UsersPutAsyncWithHttpInfo($marketing_agreement, $terms_agreement, $profile_picture = null, $original = '', $password = null, $full_name = null, $email = null)
    {
        $returnType = '\AkeneoPresales\DescrbAPI\Model\User';
        $request = $this->updateUserApiV1UsersPutRequest($marketing_agreement, $terms_agreement, $profile_picture, $original, $password, $full_name, $email);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateUserApiV1UsersPut'
     *
     * @param  bool $marketing_agreement Marketing agreement (required)
     * @param  bool $terms_agreement Terms agreement (required)
     * @param  AnyOfFileString $profile_picture Profile picture (optional)
     * @param  string $original Original password (optional, default to '')
     * @param  string $password New password (optional)
     * @param  string $full_name Full user name (optional)
     * @param  string $email User email (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateUserApiV1UsersPutRequest($marketing_agreement, $terms_agreement, $profile_picture = null, $original = '', $password = null, $full_name = null, $email = null)
    {
        // verify the required parameter 'marketing_agreement' is set
        if ($marketing_agreement === null || (is_array($marketing_agreement) && count($marketing_agreement) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketing_agreement when calling updateUserApiV1UsersPut'
            );
        }
        // verify the required parameter 'terms_agreement' is set
        if ($terms_agreement === null || (is_array($terms_agreement) && count($terms_agreement) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $terms_agreement when calling updateUserApiV1UsersPut'
            );
        }

        $resourcePath = '/api/v1/users/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($profile_picture !== null) {
            $formParams['profile_picture'] = ObjectSerializer::toFormValue($profile_picture);
        }
        // form params
        if ($original !== null) {
            $formParams['original'] = ObjectSerializer::toFormValue($original);
        }
        // form params
        if ($password !== null) {
            $formParams['password'] = ObjectSerializer::toFormValue($password);
        }
        // form params
        if ($full_name !== null) {
            $formParams['full_name'] = ObjectSerializer::toFormValue($full_name);
        }
        // form params
        if ($email !== null) {
            $formParams['email'] = ObjectSerializer::toFormValue($email);
        }
        // form params
        if ($marketing_agreement !== null) {
            $formParams['marketing_agreement'] = ObjectSerializer::toFormValue($marketing_agreement);
        }
        // form params
        if ($terms_agreement !== null) {
            $formParams['terms_agreement'] = ObjectSerializer::toFormValue($terms_agreement);
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation validateEmailApiV1UsersValidateEmailPost
     *
     * Validate Email
     *
     * @param  object $body body (required)
     *
     * @throws \AkeneoPresales\DescrbAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AkeneoPresales\DescrbAPI\Model\Msg|\AkeneoPresales\DescrbAPI\Model\HTTPValidationError
     */
    public function validateEmailApiV1UsersValidateEmailPost($body)
    {
        list($response) = $this->validateEmailApiV1UsersValidateEmailPostWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation validateEmailApiV1UsersValidateEmailPostWithHttpInfo
     *
     * Validate Email
     *
     * @param  object $body (required)
     *
     * @throws \AkeneoPresales\DescrbAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AkeneoPresales\DescrbAPI\Model\Msg|\AkeneoPresales\DescrbAPI\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function validateEmailApiV1UsersValidateEmailPostWithHttpInfo($body)
    {
        $request = $this->validateEmailApiV1UsersValidateEmailPostRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\AkeneoPresales\DescrbAPI\Model\Msg' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AkeneoPresales\DescrbAPI\Model\Msg', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\AkeneoPresales\DescrbAPI\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AkeneoPresales\DescrbAPI\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AkeneoPresales\DescrbAPI\Model\Msg';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AkeneoPresales\DescrbAPI\Model\Msg',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AkeneoPresales\DescrbAPI\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation validateEmailApiV1UsersValidateEmailPostAsync
     *
     * Validate Email
     *
     * @param  object $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function validateEmailApiV1UsersValidateEmailPostAsync($body)
    {
        return $this->validateEmailApiV1UsersValidateEmailPostAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation validateEmailApiV1UsersValidateEmailPostAsyncWithHttpInfo
     *
     * Validate Email
     *
     * @param  object $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function validateEmailApiV1UsersValidateEmailPostAsyncWithHttpInfo($body)
    {
        $returnType = '\AkeneoPresales\DescrbAPI\Model\Msg';
        $request = $this->validateEmailApiV1UsersValidateEmailPostRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'validateEmailApiV1UsersValidateEmailPost'
     *
     * @param  object $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function validateEmailApiV1UsersValidateEmailPostRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling validateEmailApiV1UsersValidateEmailPost'
            );
        }

        $resourcePath = '/api/v1/users/validate-email';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
