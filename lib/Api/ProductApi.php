<?php
/**
 * ProductApi
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * {descrb}
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ProductApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ProductApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createDemoProductAdApiV1ProductDemoPost
     *
     * Create Demo Product Ad
     *
     * @param  \SplFileObject[] $base_image Image Files (optional)
     * @param  AnyOfFileString[] $segmented_image Segmented Image Files (optional)
     * @param  string $photo_url Photo URL (optional, default to '')
     * @param  string[] $name Product Names (optional)
     * @param  string[] $product_id Product IDs (optional)
     * @param  int $length Numer of Tokens (optional, default to 512)
     * @param  string $language Supported languages: en,de,fr,es,ro,pl (optional, default to 'pl')
     * @param  string $data_language Data Source Language (optional, default to '')
     * @param  string $language_style Choose between Neutral, Casual, Specialist (optional, default to 'Neutral')
     * @param  string $keywords Important Keywords to include (optional, default to '')
     * @param  bool $seotags Add SEO Tags (optional, default to false)
     * @param  bool $product_history Add Product History (optional, default to false)
     * @param  bool $manufacturer_history Add Manufacturer History (optional, default to false)
     * @param  bool $technologies Add List of Technologies (optional, default to false)
     * @param  bool $labels Add Labels (optional, default to false)
     * @param  bool $logos Add Logo Detection (optional, default to false)
     * @param  bool $search_codes Search for SKU, MPU, Product ID (optional, default to false)
     * @param  bool $unique_product Unique product, use captions (optional, default to false)
     * @param  bool $describe_colors Should the description include colors (optional, default to false)
     * @param  bool $describe_materials Should the description include materials (optional, default to false)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function createDemoProductAdApiV1ProductDemoPost($base_image = null, $segmented_image = null, $photo_url = '', $name = null, $product_id = null, $length = 512, $language = 'pl', $data_language = '', $language_style = 'Neutral', $keywords = '', $seotags = false, $product_history = false, $manufacturer_history = false, $technologies = false, $labels = false, $logos = false, $search_codes = false, $unique_product = false, $describe_colors = false, $describe_materials = false)
    {
        list($response) = $this->createDemoProductAdApiV1ProductDemoPostWithHttpInfo($base_image, $segmented_image, $photo_url, $name, $product_id, $length, $language, $data_language, $language_style, $keywords, $seotags, $product_history, $manufacturer_history, $technologies, $labels, $logos, $search_codes, $unique_product, $describe_colors, $describe_materials);
        return $response;
    }

    /**
     * Operation createDemoProductAdApiV1ProductDemoPostWithHttpInfo
     *
     * Create Demo Product Ad
     *
     * @param  \SplFileObject[] $base_image Image Files (optional)
     * @param  AnyOfFileString[] $segmented_image Segmented Image Files (optional)
     * @param  string $photo_url Photo URL (optional, default to '')
     * @param  string[] $name Product Names (optional)
     * @param  string[] $product_id Product IDs (optional)
     * @param  int $length Numer of Tokens (optional, default to 512)
     * @param  string $language Supported languages: en,de,fr,es,ro,pl (optional, default to 'pl')
     * @param  string $data_language Data Source Language (optional, default to '')
     * @param  string $language_style Choose between Neutral, Casual, Specialist (optional, default to 'Neutral')
     * @param  string $keywords Important Keywords to include (optional, default to '')
     * @param  bool $seotags Add SEO Tags (optional, default to false)
     * @param  bool $product_history Add Product History (optional, default to false)
     * @param  bool $manufacturer_history Add Manufacturer History (optional, default to false)
     * @param  bool $technologies Add List of Technologies (optional, default to false)
     * @param  bool $labels Add Labels (optional, default to false)
     * @param  bool $logos Add Logo Detection (optional, default to false)
     * @param  bool $search_codes Search for SKU, MPU, Product ID (optional, default to false)
     * @param  bool $unique_product Unique product, use captions (optional, default to false)
     * @param  bool $describe_colors Should the description include colors (optional, default to false)
     * @param  bool $describe_materials Should the description include materials (optional, default to false)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createDemoProductAdApiV1ProductDemoPostWithHttpInfo($base_image = null, $segmented_image = null, $photo_url = '', $name = null, $product_id = null, $length = 512, $language = 'pl', $data_language = '', $language_style = 'Neutral', $keywords = '', $seotags = false, $product_history = false, $manufacturer_history = false, $technologies = false, $labels = false, $logos = false, $search_codes = false, $unique_product = false, $describe_colors = false, $describe_materials = false)
    {
        $request = $this->createDemoProductAdApiV1ProductDemoPostRequest($base_image, $segmented_image, $photo_url, $name, $product_id, $length, $language, $data_language, $language_style, $keywords, $seotags, $product_history, $manufacturer_history, $technologies, $labels, $logos, $search_codes, $unique_product, $describe_colors, $describe_materials);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createDemoProductAdApiV1ProductDemoPostAsync
     *
     * Create Demo Product Ad
     *
     * @param  \SplFileObject[] $base_image Image Files (optional)
     * @param  AnyOfFileString[] $segmented_image Segmented Image Files (optional)
     * @param  string $photo_url Photo URL (optional, default to '')
     * @param  string[] $name Product Names (optional)
     * @param  string[] $product_id Product IDs (optional)
     * @param  int $length Numer of Tokens (optional, default to 512)
     * @param  string $language Supported languages: en,de,fr,es,ro,pl (optional, default to 'pl')
     * @param  string $data_language Data Source Language (optional, default to '')
     * @param  string $language_style Choose between Neutral, Casual, Specialist (optional, default to 'Neutral')
     * @param  string $keywords Important Keywords to include (optional, default to '')
     * @param  bool $seotags Add SEO Tags (optional, default to false)
     * @param  bool $product_history Add Product History (optional, default to false)
     * @param  bool $manufacturer_history Add Manufacturer History (optional, default to false)
     * @param  bool $technologies Add List of Technologies (optional, default to false)
     * @param  bool $labels Add Labels (optional, default to false)
     * @param  bool $logos Add Logo Detection (optional, default to false)
     * @param  bool $search_codes Search for SKU, MPU, Product ID (optional, default to false)
     * @param  bool $unique_product Unique product, use captions (optional, default to false)
     * @param  bool $describe_colors Should the description include colors (optional, default to false)
     * @param  bool $describe_materials Should the description include materials (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDemoProductAdApiV1ProductDemoPostAsync($base_image = null, $segmented_image = null, $photo_url = '', $name = null, $product_id = null, $length = 512, $language = 'pl', $data_language = '', $language_style = 'Neutral', $keywords = '', $seotags = false, $product_history = false, $manufacturer_history = false, $technologies = false, $labels = false, $logos = false, $search_codes = false, $unique_product = false, $describe_colors = false, $describe_materials = false)
    {
        return $this->createDemoProductAdApiV1ProductDemoPostAsyncWithHttpInfo($base_image, $segmented_image, $photo_url, $name, $product_id, $length, $language, $data_language, $language_style, $keywords, $seotags, $product_history, $manufacturer_history, $technologies, $labels, $logos, $search_codes, $unique_product, $describe_colors, $describe_materials)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createDemoProductAdApiV1ProductDemoPostAsyncWithHttpInfo
     *
     * Create Demo Product Ad
     *
     * @param  \SplFileObject[] $base_image Image Files (optional)
     * @param  AnyOfFileString[] $segmented_image Segmented Image Files (optional)
     * @param  string $photo_url Photo URL (optional, default to '')
     * @param  string[] $name Product Names (optional)
     * @param  string[] $product_id Product IDs (optional)
     * @param  int $length Numer of Tokens (optional, default to 512)
     * @param  string $language Supported languages: en,de,fr,es,ro,pl (optional, default to 'pl')
     * @param  string $data_language Data Source Language (optional, default to '')
     * @param  string $language_style Choose between Neutral, Casual, Specialist (optional, default to 'Neutral')
     * @param  string $keywords Important Keywords to include (optional, default to '')
     * @param  bool $seotags Add SEO Tags (optional, default to false)
     * @param  bool $product_history Add Product History (optional, default to false)
     * @param  bool $manufacturer_history Add Manufacturer History (optional, default to false)
     * @param  bool $technologies Add List of Technologies (optional, default to false)
     * @param  bool $labels Add Labels (optional, default to false)
     * @param  bool $logos Add Logo Detection (optional, default to false)
     * @param  bool $search_codes Search for SKU, MPU, Product ID (optional, default to false)
     * @param  bool $unique_product Unique product, use captions (optional, default to false)
     * @param  bool $describe_colors Should the description include colors (optional, default to false)
     * @param  bool $describe_materials Should the description include materials (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDemoProductAdApiV1ProductDemoPostAsyncWithHttpInfo($base_image = null, $segmented_image = null, $photo_url = '', $name = null, $product_id = null, $length = 512, $language = 'pl', $data_language = '', $language_style = 'Neutral', $keywords = '', $seotags = false, $product_history = false, $manufacturer_history = false, $technologies = false, $labels = false, $logos = false, $search_codes = false, $unique_product = false, $describe_colors = false, $describe_materials = false)
    {
        $returnType = 'mixed';
        $request = $this->createDemoProductAdApiV1ProductDemoPostRequest($base_image, $segmented_image, $photo_url, $name, $product_id, $length, $language, $data_language, $language_style, $keywords, $seotags, $product_history, $manufacturer_history, $technologies, $labels, $logos, $search_codes, $unique_product, $describe_colors, $describe_materials);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createDemoProductAdApiV1ProductDemoPost'
     *
     * @param  \SplFileObject[] $base_image Image Files (optional)
     * @param  AnyOfFileString[] $segmented_image Segmented Image Files (optional)
     * @param  string $photo_url Photo URL (optional, default to '')
     * @param  string[] $name Product Names (optional)
     * @param  string[] $product_id Product IDs (optional)
     * @param  int $length Numer of Tokens (optional, default to 512)
     * @param  string $language Supported languages: en,de,fr,es,ro,pl (optional, default to 'pl')
     * @param  string $data_language Data Source Language (optional, default to '')
     * @param  string $language_style Choose between Neutral, Casual, Specialist (optional, default to 'Neutral')
     * @param  string $keywords Important Keywords to include (optional, default to '')
     * @param  bool $seotags Add SEO Tags (optional, default to false)
     * @param  bool $product_history Add Product History (optional, default to false)
     * @param  bool $manufacturer_history Add Manufacturer History (optional, default to false)
     * @param  bool $technologies Add List of Technologies (optional, default to false)
     * @param  bool $labels Add Labels (optional, default to false)
     * @param  bool $logos Add Logo Detection (optional, default to false)
     * @param  bool $search_codes Search for SKU, MPU, Product ID (optional, default to false)
     * @param  bool $unique_product Unique product, use captions (optional, default to false)
     * @param  bool $describe_colors Should the description include colors (optional, default to false)
     * @param  bool $describe_materials Should the description include materials (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createDemoProductAdApiV1ProductDemoPostRequest($base_image = null, $segmented_image = null, $photo_url = '', $name = null, $product_id = null, $length = 512, $language = 'pl', $data_language = '', $language_style = 'Neutral', $keywords = '', $seotags = false, $product_history = false, $manufacturer_history = false, $technologies = false, $labels = false, $logos = false, $search_codes = false, $unique_product = false, $describe_colors = false, $describe_materials = false)
    {

        $resourcePath = '/api/v1/product/demo/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($base_image !== null) {
            $multipart = true;
            $formParams['base_image'] = [];
            $paramFiles = is_array($base_image) ? $base_image : [$base_image];
            foreach ($paramFiles as $paramFile) {
                $formParams['base_image'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($segmented_image !== null) {
            $formParams['segmented_image'] = ObjectSerializer::toFormValue($segmented_image);
        }
        // form params
        if ($photo_url !== null) {
            $formParams['photo_url'] = ObjectSerializer::toFormValue($photo_url);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($product_id !== null) {
            $formParams['product_id'] = ObjectSerializer::toFormValue($product_id);
        }
        // form params
        if ($length !== null) {
            $formParams['length'] = ObjectSerializer::toFormValue($length);
        }
        // form params
        if ($language !== null) {
            $formParams['language'] = ObjectSerializer::toFormValue($language);
        }
        // form params
        if ($data_language !== null) {
            $formParams['data_language'] = ObjectSerializer::toFormValue($data_language);
        }
        // form params
        if ($language_style !== null) {
            $formParams['language_style'] = ObjectSerializer::toFormValue($language_style);
        }
        // form params
        if ($keywords !== null) {
            $formParams['keywords'] = ObjectSerializer::toFormValue($keywords);
        }
        // form params
        if ($seotags !== null) {
            $formParams['seotags'] = ObjectSerializer::toFormValue($seotags);
        }
        // form params
        if ($product_history !== null) {
            $formParams['product_history'] = ObjectSerializer::toFormValue($product_history);
        }
        // form params
        if ($manufacturer_history !== null) {
            $formParams['manufacturer_history'] = ObjectSerializer::toFormValue($manufacturer_history);
        }
        // form params
        if ($technologies !== null) {
            $formParams['technologies'] = ObjectSerializer::toFormValue($technologies);
        }
        // form params
        if ($labels !== null) {
            $formParams['labels'] = ObjectSerializer::toFormValue($labels);
        }
        // form params
        if ($logos !== null) {
            $formParams['logos'] = ObjectSerializer::toFormValue($logos);
        }
        // form params
        if ($search_codes !== null) {
            $formParams['search_codes'] = ObjectSerializer::toFormValue($search_codes);
        }
        // form params
        if ($unique_product !== null) {
            $formParams['unique_product'] = ObjectSerializer::toFormValue($unique_product);
        }
        // form params
        if ($describe_colors !== null) {
            $formParams['describe_colors'] = ObjectSerializer::toFormValue($describe_colors);
        }
        // form params
        if ($describe_materials !== null) {
            $formParams['describe_materials'] = ObjectSerializer::toFormValue($describe_materials);
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createProductAdApiV1ProductPost
     *
     * Create Product Ad
     *
     * @param  \SplFileObject[] $base_image Image Files (optional)
     * @param  AnyOfFileString[] $segmented_image Segmented Image Files (optional)
     * @param  string $photo_url Photo URL (optional, default to '')
     * @param  string[] $name Product Names (optional)
     * @param  string[] $product_id Product IDs (optional)
     * @param  int $length Numer of Tokens (optional, default to 512)
     * @param  string $language Supported languages: en,de,fr,es,ro,pl (optional, default to 'pl')
     * @param  string $data_language Data Source Language (optional, default to '')
     * @param  string $language_style Choose between Neutral, Casual, Specialist (optional, default to 'Neutral')
     * @param  string $keywords Important Keywords to include (optional, default to '')
     * @param  bool $seotags Add SEO Tags (optional, default to false)
     * @param  bool $product_history Add Product History (optional, default to false)
     * @param  bool $manufacturer_history Add Manufacturer History (optional, default to false)
     * @param  bool $technologies Add List of Technologies (optional, default to false)
     * @param  bool $labels Add Labels (optional, default to false)
     * @param  bool $logos Add Logo Detection (optional, default to false)
     * @param  bool $search_codes Search for SKU, MPU, Product ID (optional, default to false)
     * @param  bool $unique_product Unique product, use captions (optional, default to false)
     * @param  bool $describe_colors Should the description include colors (optional, default to false)
     * @param  bool $describe_materials Should the description include materials (optional, default to false)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function createProductAdApiV1ProductPost($base_image = null, $segmented_image = null, $photo_url = '', $name = null, $product_id = null, $length = 512, $language = 'pl', $data_language = '', $language_style = 'Neutral', $keywords = '', $seotags = false, $product_history = false, $manufacturer_history = false, $technologies = false, $labels = false, $logos = false, $search_codes = false, $unique_product = false, $describe_colors = false, $describe_materials = false)
    {
        list($response) = $this->createProductAdApiV1ProductPostWithHttpInfo($base_image, $segmented_image, $photo_url, $name, $product_id, $length, $language, $data_language, $language_style, $keywords, $seotags, $product_history, $manufacturer_history, $technologies, $labels, $logos, $search_codes, $unique_product, $describe_colors, $describe_materials);
        return $response;
    }

    /**
     * Operation createProductAdApiV1ProductPostWithHttpInfo
     *
     * Create Product Ad
     *
     * @param  \SplFileObject[] $base_image Image Files (optional)
     * @param  AnyOfFileString[] $segmented_image Segmented Image Files (optional)
     * @param  string $photo_url Photo URL (optional, default to '')
     * @param  string[] $name Product Names (optional)
     * @param  string[] $product_id Product IDs (optional)
     * @param  int $length Numer of Tokens (optional, default to 512)
     * @param  string $language Supported languages: en,de,fr,es,ro,pl (optional, default to 'pl')
     * @param  string $data_language Data Source Language (optional, default to '')
     * @param  string $language_style Choose between Neutral, Casual, Specialist (optional, default to 'Neutral')
     * @param  string $keywords Important Keywords to include (optional, default to '')
     * @param  bool $seotags Add SEO Tags (optional, default to false)
     * @param  bool $product_history Add Product History (optional, default to false)
     * @param  bool $manufacturer_history Add Manufacturer History (optional, default to false)
     * @param  bool $technologies Add List of Technologies (optional, default to false)
     * @param  bool $labels Add Labels (optional, default to false)
     * @param  bool $logos Add Logo Detection (optional, default to false)
     * @param  bool $search_codes Search for SKU, MPU, Product ID (optional, default to false)
     * @param  bool $unique_product Unique product, use captions (optional, default to false)
     * @param  bool $describe_colors Should the description include colors (optional, default to false)
     * @param  bool $describe_materials Should the description include materials (optional, default to false)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createProductAdApiV1ProductPostWithHttpInfo($base_image = null, $segmented_image = null, $photo_url = '', $name = null, $product_id = null, $length = 512, $language = 'pl', $data_language = '', $language_style = 'Neutral', $keywords = '', $seotags = false, $product_history = false, $manufacturer_history = false, $technologies = false, $labels = false, $logos = false, $search_codes = false, $unique_product = false, $describe_colors = false, $describe_materials = false)
    {
        $request = $this->createProductAdApiV1ProductPostRequest($base_image, $segmented_image, $photo_url, $name, $product_id, $length, $language, $data_language, $language_style, $keywords, $seotags, $product_history, $manufacturer_history, $technologies, $labels, $logos, $search_codes, $unique_product, $describe_colors, $describe_materials);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createProductAdApiV1ProductPostAsync
     *
     * Create Product Ad
     *
     * @param  \SplFileObject[] $base_image Image Files (optional)
     * @param  AnyOfFileString[] $segmented_image Segmented Image Files (optional)
     * @param  string $photo_url Photo URL (optional, default to '')
     * @param  string[] $name Product Names (optional)
     * @param  string[] $product_id Product IDs (optional)
     * @param  int $length Numer of Tokens (optional, default to 512)
     * @param  string $language Supported languages: en,de,fr,es,ro,pl (optional, default to 'pl')
     * @param  string $data_language Data Source Language (optional, default to '')
     * @param  string $language_style Choose between Neutral, Casual, Specialist (optional, default to 'Neutral')
     * @param  string $keywords Important Keywords to include (optional, default to '')
     * @param  bool $seotags Add SEO Tags (optional, default to false)
     * @param  bool $product_history Add Product History (optional, default to false)
     * @param  bool $manufacturer_history Add Manufacturer History (optional, default to false)
     * @param  bool $technologies Add List of Technologies (optional, default to false)
     * @param  bool $labels Add Labels (optional, default to false)
     * @param  bool $logos Add Logo Detection (optional, default to false)
     * @param  bool $search_codes Search for SKU, MPU, Product ID (optional, default to false)
     * @param  bool $unique_product Unique product, use captions (optional, default to false)
     * @param  bool $describe_colors Should the description include colors (optional, default to false)
     * @param  bool $describe_materials Should the description include materials (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createProductAdApiV1ProductPostAsync($base_image = null, $segmented_image = null, $photo_url = '', $name = null, $product_id = null, $length = 512, $language = 'pl', $data_language = '', $language_style = 'Neutral', $keywords = '', $seotags = false, $product_history = false, $manufacturer_history = false, $technologies = false, $labels = false, $logos = false, $search_codes = false, $unique_product = false, $describe_colors = false, $describe_materials = false)
    {
        return $this->createProductAdApiV1ProductPostAsyncWithHttpInfo($base_image, $segmented_image, $photo_url, $name, $product_id, $length, $language, $data_language, $language_style, $keywords, $seotags, $product_history, $manufacturer_history, $technologies, $labels, $logos, $search_codes, $unique_product, $describe_colors, $describe_materials)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createProductAdApiV1ProductPostAsyncWithHttpInfo
     *
     * Create Product Ad
     *
     * @param  \SplFileObject[] $base_image Image Files (optional)
     * @param  AnyOfFileString[] $segmented_image Segmented Image Files (optional)
     * @param  string $photo_url Photo URL (optional, default to '')
     * @param  string[] $name Product Names (optional)
     * @param  string[] $product_id Product IDs (optional)
     * @param  int $length Numer of Tokens (optional, default to 512)
     * @param  string $language Supported languages: en,de,fr,es,ro,pl (optional, default to 'pl')
     * @param  string $data_language Data Source Language (optional, default to '')
     * @param  string $language_style Choose between Neutral, Casual, Specialist (optional, default to 'Neutral')
     * @param  string $keywords Important Keywords to include (optional, default to '')
     * @param  bool $seotags Add SEO Tags (optional, default to false)
     * @param  bool $product_history Add Product History (optional, default to false)
     * @param  bool $manufacturer_history Add Manufacturer History (optional, default to false)
     * @param  bool $technologies Add List of Technologies (optional, default to false)
     * @param  bool $labels Add Labels (optional, default to false)
     * @param  bool $logos Add Logo Detection (optional, default to false)
     * @param  bool $search_codes Search for SKU, MPU, Product ID (optional, default to false)
     * @param  bool $unique_product Unique product, use captions (optional, default to false)
     * @param  bool $describe_colors Should the description include colors (optional, default to false)
     * @param  bool $describe_materials Should the description include materials (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createProductAdApiV1ProductPostAsyncWithHttpInfo($base_image = null, $segmented_image = null, $photo_url = '', $name = null, $product_id = null, $length = 512, $language = 'pl', $data_language = '', $language_style = 'Neutral', $keywords = '', $seotags = false, $product_history = false, $manufacturer_history = false, $technologies = false, $labels = false, $logos = false, $search_codes = false, $unique_product = false, $describe_colors = false, $describe_materials = false)
    {
        $returnType = 'mixed';
        $request = $this->createProductAdApiV1ProductPostRequest($base_image, $segmented_image, $photo_url, $name, $product_id, $length, $language, $data_language, $language_style, $keywords, $seotags, $product_history, $manufacturer_history, $technologies, $labels, $logos, $search_codes, $unique_product, $describe_colors, $describe_materials);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createProductAdApiV1ProductPost'
     *
     * @param  \SplFileObject[] $base_image Image Files (optional)
     * @param  AnyOfFileString[] $segmented_image Segmented Image Files (optional)
     * @param  string $photo_url Photo URL (optional, default to '')
     * @param  string[] $name Product Names (optional)
     * @param  string[] $product_id Product IDs (optional)
     * @param  int $length Numer of Tokens (optional, default to 512)
     * @param  string $language Supported languages: en,de,fr,es,ro,pl (optional, default to 'pl')
     * @param  string $data_language Data Source Language (optional, default to '')
     * @param  string $language_style Choose between Neutral, Casual, Specialist (optional, default to 'Neutral')
     * @param  string $keywords Important Keywords to include (optional, default to '')
     * @param  bool $seotags Add SEO Tags (optional, default to false)
     * @param  bool $product_history Add Product History (optional, default to false)
     * @param  bool $manufacturer_history Add Manufacturer History (optional, default to false)
     * @param  bool $technologies Add List of Technologies (optional, default to false)
     * @param  bool $labels Add Labels (optional, default to false)
     * @param  bool $logos Add Logo Detection (optional, default to false)
     * @param  bool $search_codes Search for SKU, MPU, Product ID (optional, default to false)
     * @param  bool $unique_product Unique product, use captions (optional, default to false)
     * @param  bool $describe_colors Should the description include colors (optional, default to false)
     * @param  bool $describe_materials Should the description include materials (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createProductAdApiV1ProductPostRequest($base_image = null, $segmented_image = null, $photo_url = '', $name = null, $product_id = null, $length = 512, $language = 'pl', $data_language = '', $language_style = 'Neutral', $keywords = '', $seotags = false, $product_history = false, $manufacturer_history = false, $technologies = false, $labels = false, $logos = false, $search_codes = false, $unique_product = false, $describe_colors = false, $describe_materials = false)
    {

        $resourcePath = '/api/v1/product/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($base_image !== null) {
            $multipart = true;
            $formParams['base_image'] = [];
            $paramFiles = is_array($base_image) ? $base_image : [$base_image];
            foreach ($paramFiles as $paramFile) {
                $formParams['base_image'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($segmented_image !== null) {
            $formParams['segmented_image'] = ObjectSerializer::toFormValue($segmented_image);
        }
        // form params
        if ($photo_url !== null) {
            $formParams['photo_url'] = ObjectSerializer::toFormValue($photo_url);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($product_id !== null) {
            $formParams['product_id'] = ObjectSerializer::toFormValue($product_id);
        }
        // form params
        if ($length !== null) {
            $formParams['length'] = ObjectSerializer::toFormValue($length);
        }
        // form params
        if ($language !== null) {
            $formParams['language'] = ObjectSerializer::toFormValue($language);
        }
        // form params
        if ($data_language !== null) {
            $formParams['data_language'] = ObjectSerializer::toFormValue($data_language);
        }
        // form params
        if ($language_style !== null) {
            $formParams['language_style'] = ObjectSerializer::toFormValue($language_style);
        }
        // form params
        if ($keywords !== null) {
            $formParams['keywords'] = ObjectSerializer::toFormValue($keywords);
        }
        // form params
        if ($seotags !== null) {
            $formParams['seotags'] = ObjectSerializer::toFormValue($seotags);
        }
        // form params
        if ($product_history !== null) {
            $formParams['product_history'] = ObjectSerializer::toFormValue($product_history);
        }
        // form params
        if ($manufacturer_history !== null) {
            $formParams['manufacturer_history'] = ObjectSerializer::toFormValue($manufacturer_history);
        }
        // form params
        if ($technologies !== null) {
            $formParams['technologies'] = ObjectSerializer::toFormValue($technologies);
        }
        // form params
        if ($labels !== null) {
            $formParams['labels'] = ObjectSerializer::toFormValue($labels);
        }
        // form params
        if ($logos !== null) {
            $formParams['logos'] = ObjectSerializer::toFormValue($logos);
        }
        // form params
        if ($search_codes !== null) {
            $formParams['search_codes'] = ObjectSerializer::toFormValue($search_codes);
        }
        // form params
        if ($unique_product !== null) {
            $formParams['unique_product'] = ObjectSerializer::toFormValue($unique_product);
        }
        // form params
        if ($describe_colors !== null) {
            $formParams['describe_colors'] = ObjectSerializer::toFormValue($describe_colors);
        }
        // form params
        if ($describe_materials !== null) {
            $formParams['describe_materials'] = ObjectSerializer::toFormValue($describe_materials);
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation editBrandDescriptionApiV1ProductBrandDescriptionIdPatch
     *
     * Edit Brand Description
     *
     * @param  string $description_id description_id (required)
     * @param  \OpenAPI\Client\Model\BrandDescriptionUpdate $brand_description_update brand_description_update (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BrandDescriptionUpdate|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function editBrandDescriptionApiV1ProductBrandDescriptionIdPatch($description_id, $brand_description_update)
    {
        list($response) = $this->editBrandDescriptionApiV1ProductBrandDescriptionIdPatchWithHttpInfo($description_id, $brand_description_update);
        return $response;
    }

    /**
     * Operation editBrandDescriptionApiV1ProductBrandDescriptionIdPatchWithHttpInfo
     *
     * Edit Brand Description
     *
     * @param  string $description_id (required)
     * @param  \OpenAPI\Client\Model\BrandDescriptionUpdate $brand_description_update (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BrandDescriptionUpdate|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function editBrandDescriptionApiV1ProductBrandDescriptionIdPatchWithHttpInfo($description_id, $brand_description_update)
    {
        $request = $this->editBrandDescriptionApiV1ProductBrandDescriptionIdPatchRequest($description_id, $brand_description_update);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BrandDescriptionUpdate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BrandDescriptionUpdate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BrandDescriptionUpdate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BrandDescriptionUpdate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation editBrandDescriptionApiV1ProductBrandDescriptionIdPatchAsync
     *
     * Edit Brand Description
     *
     * @param  string $description_id (required)
     * @param  \OpenAPI\Client\Model\BrandDescriptionUpdate $brand_description_update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editBrandDescriptionApiV1ProductBrandDescriptionIdPatchAsync($description_id, $brand_description_update)
    {
        return $this->editBrandDescriptionApiV1ProductBrandDescriptionIdPatchAsyncWithHttpInfo($description_id, $brand_description_update)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation editBrandDescriptionApiV1ProductBrandDescriptionIdPatchAsyncWithHttpInfo
     *
     * Edit Brand Description
     *
     * @param  string $description_id (required)
     * @param  \OpenAPI\Client\Model\BrandDescriptionUpdate $brand_description_update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editBrandDescriptionApiV1ProductBrandDescriptionIdPatchAsyncWithHttpInfo($description_id, $brand_description_update)
    {
        $returnType = '\OpenAPI\Client\Model\BrandDescriptionUpdate';
        $request = $this->editBrandDescriptionApiV1ProductBrandDescriptionIdPatchRequest($description_id, $brand_description_update);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'editBrandDescriptionApiV1ProductBrandDescriptionIdPatch'
     *
     * @param  string $description_id (required)
     * @param  \OpenAPI\Client\Model\BrandDescriptionUpdate $brand_description_update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function editBrandDescriptionApiV1ProductBrandDescriptionIdPatchRequest($description_id, $brand_description_update)
    {
        // verify the required parameter 'description_id' is set
        if ($description_id === null || (is_array($description_id) && count($description_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $description_id when calling editBrandDescriptionApiV1ProductBrandDescriptionIdPatch'
            );
        }
        // verify the required parameter 'brand_description_update' is set
        if ($brand_description_update === null || (is_array($brand_description_update) && count($brand_description_update) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $brand_description_update when calling editBrandDescriptionApiV1ProductBrandDescriptionIdPatch'
            );
        }

        $resourcePath = '/api/v1/product/brand/{description_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($description_id !== null) {
            $resourcePath = str_replace(
                '{' . 'description_id' . '}',
                ObjectSerializer::toPathValue($description_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($brand_description_update)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($brand_description_update));
            } else {
                $httpBody = $brand_description_update;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation editDescriptionApiV1ProductDescriptionDescriptionIdPatch
     *
     * Edit Description
     *
     * @param  string $description_id description_id (required)
     * @param  \OpenAPI\Client\Model\ProductDescriptionUpdate $product_description_update product_description_update (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProductDescriptionUpdate|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function editDescriptionApiV1ProductDescriptionDescriptionIdPatch($description_id, $product_description_update)
    {
        list($response) = $this->editDescriptionApiV1ProductDescriptionDescriptionIdPatchWithHttpInfo($description_id, $product_description_update);
        return $response;
    }

    /**
     * Operation editDescriptionApiV1ProductDescriptionDescriptionIdPatchWithHttpInfo
     *
     * Edit Description
     *
     * @param  string $description_id (required)
     * @param  \OpenAPI\Client\Model\ProductDescriptionUpdate $product_description_update (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProductDescriptionUpdate|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function editDescriptionApiV1ProductDescriptionDescriptionIdPatchWithHttpInfo($description_id, $product_description_update)
    {
        $request = $this->editDescriptionApiV1ProductDescriptionDescriptionIdPatchRequest($description_id, $product_description_update);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ProductDescriptionUpdate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ProductDescriptionUpdate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ProductDescriptionUpdate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProductDescriptionUpdate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation editDescriptionApiV1ProductDescriptionDescriptionIdPatchAsync
     *
     * Edit Description
     *
     * @param  string $description_id (required)
     * @param  \OpenAPI\Client\Model\ProductDescriptionUpdate $product_description_update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editDescriptionApiV1ProductDescriptionDescriptionIdPatchAsync($description_id, $product_description_update)
    {
        return $this->editDescriptionApiV1ProductDescriptionDescriptionIdPatchAsyncWithHttpInfo($description_id, $product_description_update)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation editDescriptionApiV1ProductDescriptionDescriptionIdPatchAsyncWithHttpInfo
     *
     * Edit Description
     *
     * @param  string $description_id (required)
     * @param  \OpenAPI\Client\Model\ProductDescriptionUpdate $product_description_update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editDescriptionApiV1ProductDescriptionDescriptionIdPatchAsyncWithHttpInfo($description_id, $product_description_update)
    {
        $returnType = '\OpenAPI\Client\Model\ProductDescriptionUpdate';
        $request = $this->editDescriptionApiV1ProductDescriptionDescriptionIdPatchRequest($description_id, $product_description_update);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'editDescriptionApiV1ProductDescriptionDescriptionIdPatch'
     *
     * @param  string $description_id (required)
     * @param  \OpenAPI\Client\Model\ProductDescriptionUpdate $product_description_update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function editDescriptionApiV1ProductDescriptionDescriptionIdPatchRequest($description_id, $product_description_update)
    {
        // verify the required parameter 'description_id' is set
        if ($description_id === null || (is_array($description_id) && count($description_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $description_id when calling editDescriptionApiV1ProductDescriptionDescriptionIdPatch'
            );
        }
        // verify the required parameter 'product_description_update' is set
        if ($product_description_update === null || (is_array($product_description_update) && count($product_description_update) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_description_update when calling editDescriptionApiV1ProductDescriptionDescriptionIdPatch'
            );
        }

        $resourcePath = '/api/v1/product/description/{description_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($description_id !== null) {
            $resourcePath = str_replace(
                '{' . 'description_id' . '}',
                ObjectSerializer::toPathValue($description_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($product_description_update)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($product_description_update));
            } else {
                $httpBody = $product_description_update;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation editHistoryDescriptionApiV1ProductHistoryDescriptionIdPatch
     *
     * Edit History Description
     *
     * @param  string $description_id description_id (required)
     * @param  \OpenAPI\Client\Model\ProductHistoryUpdate $product_history_update product_history_update (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProductHistoryUpdate|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function editHistoryDescriptionApiV1ProductHistoryDescriptionIdPatch($description_id, $product_history_update)
    {
        list($response) = $this->editHistoryDescriptionApiV1ProductHistoryDescriptionIdPatchWithHttpInfo($description_id, $product_history_update);
        return $response;
    }

    /**
     * Operation editHistoryDescriptionApiV1ProductHistoryDescriptionIdPatchWithHttpInfo
     *
     * Edit History Description
     *
     * @param  string $description_id (required)
     * @param  \OpenAPI\Client\Model\ProductHistoryUpdate $product_history_update (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProductHistoryUpdate|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function editHistoryDescriptionApiV1ProductHistoryDescriptionIdPatchWithHttpInfo($description_id, $product_history_update)
    {
        $request = $this->editHistoryDescriptionApiV1ProductHistoryDescriptionIdPatchRequest($description_id, $product_history_update);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ProductHistoryUpdate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ProductHistoryUpdate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ProductHistoryUpdate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProductHistoryUpdate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation editHistoryDescriptionApiV1ProductHistoryDescriptionIdPatchAsync
     *
     * Edit History Description
     *
     * @param  string $description_id (required)
     * @param  \OpenAPI\Client\Model\ProductHistoryUpdate $product_history_update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editHistoryDescriptionApiV1ProductHistoryDescriptionIdPatchAsync($description_id, $product_history_update)
    {
        return $this->editHistoryDescriptionApiV1ProductHistoryDescriptionIdPatchAsyncWithHttpInfo($description_id, $product_history_update)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation editHistoryDescriptionApiV1ProductHistoryDescriptionIdPatchAsyncWithHttpInfo
     *
     * Edit History Description
     *
     * @param  string $description_id (required)
     * @param  \OpenAPI\Client\Model\ProductHistoryUpdate $product_history_update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editHistoryDescriptionApiV1ProductHistoryDescriptionIdPatchAsyncWithHttpInfo($description_id, $product_history_update)
    {
        $returnType = '\OpenAPI\Client\Model\ProductHistoryUpdate';
        $request = $this->editHistoryDescriptionApiV1ProductHistoryDescriptionIdPatchRequest($description_id, $product_history_update);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'editHistoryDescriptionApiV1ProductHistoryDescriptionIdPatch'
     *
     * @param  string $description_id (required)
     * @param  \OpenAPI\Client\Model\ProductHistoryUpdate $product_history_update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function editHistoryDescriptionApiV1ProductHistoryDescriptionIdPatchRequest($description_id, $product_history_update)
    {
        // verify the required parameter 'description_id' is set
        if ($description_id === null || (is_array($description_id) && count($description_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $description_id when calling editHistoryDescriptionApiV1ProductHistoryDescriptionIdPatch'
            );
        }
        // verify the required parameter 'product_history_update' is set
        if ($product_history_update === null || (is_array($product_history_update) && count($product_history_update) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_history_update when calling editHistoryDescriptionApiV1ProductHistoryDescriptionIdPatch'
            );
        }

        $resourcePath = '/api/v1/product/history/{description_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($description_id !== null) {
            $resourcePath = str_replace(
                '{' . 'description_id' . '}',
                ObjectSerializer::toPathValue($description_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($product_history_update)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($product_history_update));
            } else {
                $httpBody = $product_history_update;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation exportChosenToCsvApiV1ProductExportChosenPut
     *
     * Export Chosen To Csv
     *
     * @param  mixed[] $request_body request_body (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function exportChosenToCsvApiV1ProductExportChosenPut($request_body)
    {
        list($response) = $this->exportChosenToCsvApiV1ProductExportChosenPutWithHttpInfo($request_body);
        return $response;
    }

    /**
     * Operation exportChosenToCsvApiV1ProductExportChosenPutWithHttpInfo
     *
     * Export Chosen To Csv
     *
     * @param  mixed[] $request_body (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportChosenToCsvApiV1ProductExportChosenPutWithHttpInfo($request_body)
    {
        $request = $this->exportChosenToCsvApiV1ProductExportChosenPutRequest($request_body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation exportChosenToCsvApiV1ProductExportChosenPutAsync
     *
     * Export Chosen To Csv
     *
     * @param  mixed[] $request_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportChosenToCsvApiV1ProductExportChosenPutAsync($request_body)
    {
        return $this->exportChosenToCsvApiV1ProductExportChosenPutAsyncWithHttpInfo($request_body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation exportChosenToCsvApiV1ProductExportChosenPutAsyncWithHttpInfo
     *
     * Export Chosen To Csv
     *
     * @param  mixed[] $request_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportChosenToCsvApiV1ProductExportChosenPutAsyncWithHttpInfo($request_body)
    {
        $returnType = 'mixed';
        $request = $this->exportChosenToCsvApiV1ProductExportChosenPutRequest($request_body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'exportChosenToCsvApiV1ProductExportChosenPut'
     *
     * @param  mixed[] $request_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function exportChosenToCsvApiV1ProductExportChosenPutRequest($request_body)
    {
        // verify the required parameter 'request_body' is set
        if ($request_body === null || (is_array($request_body) && count($request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request_body when calling exportChosenToCsvApiV1ProductExportChosenPut'
            );
        }

        $resourcePath = '/api/v1/product/export-chosen';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($request_body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($request_body));
            } else {
                $httpBody = $request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation exportPageToCsvAdminPanelApiV1ProductAdminExportCurrentPageGet
     *
     * Export Page To Csv Admin Panel
     *
     * @param  string $user_id user_id (optional)
     * @param  int $limit limit (optional, default to 50)
     * @param  int $offset offset (optional, default to 0)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function exportPageToCsvAdminPanelApiV1ProductAdminExportCurrentPageGet($user_id = null, $limit = 50, $offset = 0)
    {
        list($response) = $this->exportPageToCsvAdminPanelApiV1ProductAdminExportCurrentPageGetWithHttpInfo($user_id, $limit, $offset);
        return $response;
    }

    /**
     * Operation exportPageToCsvAdminPanelApiV1ProductAdminExportCurrentPageGetWithHttpInfo
     *
     * Export Page To Csv Admin Panel
     *
     * @param  string $user_id (optional)
     * @param  int $limit (optional, default to 50)
     * @param  int $offset (optional, default to 0)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportPageToCsvAdminPanelApiV1ProductAdminExportCurrentPageGetWithHttpInfo($user_id = null, $limit = 50, $offset = 0)
    {
        $request = $this->exportPageToCsvAdminPanelApiV1ProductAdminExportCurrentPageGetRequest($user_id, $limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation exportPageToCsvAdminPanelApiV1ProductAdminExportCurrentPageGetAsync
     *
     * Export Page To Csv Admin Panel
     *
     * @param  string $user_id (optional)
     * @param  int $limit (optional, default to 50)
     * @param  int $offset (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportPageToCsvAdminPanelApiV1ProductAdminExportCurrentPageGetAsync($user_id = null, $limit = 50, $offset = 0)
    {
        return $this->exportPageToCsvAdminPanelApiV1ProductAdminExportCurrentPageGetAsyncWithHttpInfo($user_id, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation exportPageToCsvAdminPanelApiV1ProductAdminExportCurrentPageGetAsyncWithHttpInfo
     *
     * Export Page To Csv Admin Panel
     *
     * @param  string $user_id (optional)
     * @param  int $limit (optional, default to 50)
     * @param  int $offset (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportPageToCsvAdminPanelApiV1ProductAdminExportCurrentPageGetAsyncWithHttpInfo($user_id = null, $limit = 50, $offset = 0)
    {
        $returnType = 'mixed';
        $request = $this->exportPageToCsvAdminPanelApiV1ProductAdminExportCurrentPageGetRequest($user_id, $limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'exportPageToCsvAdminPanelApiV1ProductAdminExportCurrentPageGet'
     *
     * @param  string $user_id (optional)
     * @param  int $limit (optional, default to 50)
     * @param  int $offset (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function exportPageToCsvAdminPanelApiV1ProductAdminExportCurrentPageGetRequest($user_id = null, $limit = 50, $offset = 0)
    {
        if ($limit !== null && $limit > 100) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ProductApi.exportPageToCsvAdminPanelApiV1ProductAdminExportCurrentPageGet, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ProductApi.exportPageToCsvAdminPanelApiV1ProductAdminExportCurrentPageGet, must be bigger than or equal to 1.');
        }

        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling ProductApi.exportPageToCsvAdminPanelApiV1ProductAdminExportCurrentPageGet, must be bigger than or equal to 0.');
        }


        $resourcePath = '/api/v1/product/admin/export-current-page';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($user_id !== null) {
            if('form' === 'form' && is_array($user_id)) {
                foreach($user_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user_id'] = $user_id;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation exportPageToCsvApiV1ProductExportCurrentPageGet
     *
     * Export Page To Csv
     *
     * @param  int $limit limit (optional, default to 50)
     * @param  int $offset offset (optional, default to 0)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function exportPageToCsvApiV1ProductExportCurrentPageGet($limit = 50, $offset = 0)
    {
        list($response) = $this->exportPageToCsvApiV1ProductExportCurrentPageGetWithHttpInfo($limit, $offset);
        return $response;
    }

    /**
     * Operation exportPageToCsvApiV1ProductExportCurrentPageGetWithHttpInfo
     *
     * Export Page To Csv
     *
     * @param  int $limit (optional, default to 50)
     * @param  int $offset (optional, default to 0)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportPageToCsvApiV1ProductExportCurrentPageGetWithHttpInfo($limit = 50, $offset = 0)
    {
        $request = $this->exportPageToCsvApiV1ProductExportCurrentPageGetRequest($limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation exportPageToCsvApiV1ProductExportCurrentPageGetAsync
     *
     * Export Page To Csv
     *
     * @param  int $limit (optional, default to 50)
     * @param  int $offset (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportPageToCsvApiV1ProductExportCurrentPageGetAsync($limit = 50, $offset = 0)
    {
        return $this->exportPageToCsvApiV1ProductExportCurrentPageGetAsyncWithHttpInfo($limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation exportPageToCsvApiV1ProductExportCurrentPageGetAsyncWithHttpInfo
     *
     * Export Page To Csv
     *
     * @param  int $limit (optional, default to 50)
     * @param  int $offset (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportPageToCsvApiV1ProductExportCurrentPageGetAsyncWithHttpInfo($limit = 50, $offset = 0)
    {
        $returnType = 'mixed';
        $request = $this->exportPageToCsvApiV1ProductExportCurrentPageGetRequest($limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'exportPageToCsvApiV1ProductExportCurrentPageGet'
     *
     * @param  int $limit (optional, default to 50)
     * @param  int $offset (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function exportPageToCsvApiV1ProductExportCurrentPageGetRequest($limit = 50, $offset = 0)
    {
        if ($limit !== null && $limit > 100) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ProductApi.exportPageToCsvApiV1ProductExportCurrentPageGet, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ProductApi.exportPageToCsvApiV1ProductExportCurrentPageGet, must be bigger than or equal to 1.');
        }

        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling ProductApi.exportPageToCsvApiV1ProductExportCurrentPageGet, must be bigger than or equal to 0.');
        }


        $resourcePath = '/api/v1/product/export-current-page';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation exportToCsvAdminPanelApiV1ProductAdminExportAllGet
     *
     * Export To Csv Admin Panel
     *
     * @param  string $user_id user_id (optional)
     * @param  mixed $limit limit (optional)
     * @param  mixed $offset offset (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function exportToCsvAdminPanelApiV1ProductAdminExportAllGet($user_id = null, $limit = null, $offset = null)
    {
        list($response) = $this->exportToCsvAdminPanelApiV1ProductAdminExportAllGetWithHttpInfo($user_id, $limit, $offset);
        return $response;
    }

    /**
     * Operation exportToCsvAdminPanelApiV1ProductAdminExportAllGetWithHttpInfo
     *
     * Export To Csv Admin Panel
     *
     * @param  string $user_id (optional)
     * @param  mixed $limit (optional)
     * @param  mixed $offset (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportToCsvAdminPanelApiV1ProductAdminExportAllGetWithHttpInfo($user_id = null, $limit = null, $offset = null)
    {
        $request = $this->exportToCsvAdminPanelApiV1ProductAdminExportAllGetRequest($user_id, $limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation exportToCsvAdminPanelApiV1ProductAdminExportAllGetAsync
     *
     * Export To Csv Admin Panel
     *
     * @param  string $user_id (optional)
     * @param  mixed $limit (optional)
     * @param  mixed $offset (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportToCsvAdminPanelApiV1ProductAdminExportAllGetAsync($user_id = null, $limit = null, $offset = null)
    {
        return $this->exportToCsvAdminPanelApiV1ProductAdminExportAllGetAsyncWithHttpInfo($user_id, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation exportToCsvAdminPanelApiV1ProductAdminExportAllGetAsyncWithHttpInfo
     *
     * Export To Csv Admin Panel
     *
     * @param  string $user_id (optional)
     * @param  mixed $limit (optional)
     * @param  mixed $offset (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportToCsvAdminPanelApiV1ProductAdminExportAllGetAsyncWithHttpInfo($user_id = null, $limit = null, $offset = null)
    {
        $returnType = 'mixed';
        $request = $this->exportToCsvAdminPanelApiV1ProductAdminExportAllGetRequest($user_id, $limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'exportToCsvAdminPanelApiV1ProductAdminExportAllGet'
     *
     * @param  string $user_id (optional)
     * @param  mixed $limit (optional)
     * @param  mixed $offset (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function exportToCsvAdminPanelApiV1ProductAdminExportAllGetRequest($user_id = null, $limit = null, $offset = null)
    {

        $resourcePath = '/api/v1/product/admin/export-all';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($user_id !== null) {
            if('form' === 'form' && is_array($user_id)) {
                foreach($user_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user_id'] = $user_id;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation exportToCsvApiV1ProductExportAllGet
     *
     * Export To Csv
     *
     * @param  mixed $limit limit (optional)
     * @param  mixed $offset offset (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function exportToCsvApiV1ProductExportAllGet($limit = null, $offset = null)
    {
        list($response) = $this->exportToCsvApiV1ProductExportAllGetWithHttpInfo($limit, $offset);
        return $response;
    }

    /**
     * Operation exportToCsvApiV1ProductExportAllGetWithHttpInfo
     *
     * Export To Csv
     *
     * @param  mixed $limit (optional)
     * @param  mixed $offset (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportToCsvApiV1ProductExportAllGetWithHttpInfo($limit = null, $offset = null)
    {
        $request = $this->exportToCsvApiV1ProductExportAllGetRequest($limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation exportToCsvApiV1ProductExportAllGetAsync
     *
     * Export To Csv
     *
     * @param  mixed $limit (optional)
     * @param  mixed $offset (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportToCsvApiV1ProductExportAllGetAsync($limit = null, $offset = null)
    {
        return $this->exportToCsvApiV1ProductExportAllGetAsyncWithHttpInfo($limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation exportToCsvApiV1ProductExportAllGetAsyncWithHttpInfo
     *
     * Export To Csv
     *
     * @param  mixed $limit (optional)
     * @param  mixed $offset (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportToCsvApiV1ProductExportAllGetAsyncWithHttpInfo($limit = null, $offset = null)
    {
        $returnType = 'mixed';
        $request = $this->exportToCsvApiV1ProductExportAllGetRequest($limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'exportToCsvApiV1ProductExportAllGet'
     *
     * @param  mixed $limit (optional)
     * @param  mixed $offset (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function exportToCsvApiV1ProductExportAllGetRequest($limit = null, $offset = null)
    {

        $resourcePath = '/api/v1/product/export-all';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDescriptionApiV1ProductDescriptionIdGet
     *
     * Get Description
     *
     * @param  string $description_id description_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProductDescriptionExtended|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function getDescriptionApiV1ProductDescriptionIdGet($description_id)
    {
        list($response) = $this->getDescriptionApiV1ProductDescriptionIdGetWithHttpInfo($description_id);
        return $response;
    }

    /**
     * Operation getDescriptionApiV1ProductDescriptionIdGetWithHttpInfo
     *
     * Get Description
     *
     * @param  string $description_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProductDescriptionExtended|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDescriptionApiV1ProductDescriptionIdGetWithHttpInfo($description_id)
    {
        $request = $this->getDescriptionApiV1ProductDescriptionIdGetRequest($description_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ProductDescriptionExtended' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ProductDescriptionExtended', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ProductDescriptionExtended';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProductDescriptionExtended',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDescriptionApiV1ProductDescriptionIdGetAsync
     *
     * Get Description
     *
     * @param  string $description_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDescriptionApiV1ProductDescriptionIdGetAsync($description_id)
    {
        return $this->getDescriptionApiV1ProductDescriptionIdGetAsyncWithHttpInfo($description_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDescriptionApiV1ProductDescriptionIdGetAsyncWithHttpInfo
     *
     * Get Description
     *
     * @param  string $description_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDescriptionApiV1ProductDescriptionIdGetAsyncWithHttpInfo($description_id)
    {
        $returnType = '\OpenAPI\Client\Model\ProductDescriptionExtended';
        $request = $this->getDescriptionApiV1ProductDescriptionIdGetRequest($description_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDescriptionApiV1ProductDescriptionIdGet'
     *
     * @param  string $description_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDescriptionApiV1ProductDescriptionIdGetRequest($description_id)
    {
        // verify the required parameter 'description_id' is set
        if ($description_id === null || (is_array($description_id) && count($description_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $description_id when calling getDescriptionApiV1ProductDescriptionIdGet'
            );
        }

        $resourcePath = '/api/v1/product/{description_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($description_id !== null) {
            $resourcePath = str_replace(
                '{' . 'description_id' . '}',
                ObjectSerializer::toPathValue($description_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation readAllProductDescriptionsApiV1ProductAllGet
     *
     * Read All Product Descriptions
     *
     * @param  int $score score (optional)
     * @param  string $name__ilike name__ilike (optional)
     * @param  string $brand_name__ilike brand_name__ilike (optional)
     * @param  string $order_by order_by (optional, default to 'score,name,brand_name,created_at,brand_description_bool,product_history_description_bool,technologies_bool')
     * @param  int $limit limit (optional, default to 50)
     * @param  int $offset offset (optional, default to 0)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\LimitOffsetPageProductDescriptionInDB|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function readAllProductDescriptionsApiV1ProductAllGet($score = null, $name__ilike = null, $brand_name__ilike = null, $order_by = 'score,name,brand_name,created_at,brand_description_bool,product_history_description_bool,technologies_bool', $limit = 50, $offset = 0)
    {
        list($response) = $this->readAllProductDescriptionsApiV1ProductAllGetWithHttpInfo($score, $name__ilike, $brand_name__ilike, $order_by, $limit, $offset);
        return $response;
    }

    /**
     * Operation readAllProductDescriptionsApiV1ProductAllGetWithHttpInfo
     *
     * Read All Product Descriptions
     *
     * @param  int $score (optional)
     * @param  string $name__ilike (optional)
     * @param  string $brand_name__ilike (optional)
     * @param  string $order_by (optional, default to 'score,name,brand_name,created_at,brand_description_bool,product_history_description_bool,technologies_bool')
     * @param  int $limit (optional, default to 50)
     * @param  int $offset (optional, default to 0)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LimitOffsetPageProductDescriptionInDB|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function readAllProductDescriptionsApiV1ProductAllGetWithHttpInfo($score = null, $name__ilike = null, $brand_name__ilike = null, $order_by = 'score,name,brand_name,created_at,brand_description_bool,product_history_description_bool,technologies_bool', $limit = 50, $offset = 0)
    {
        $request = $this->readAllProductDescriptionsApiV1ProductAllGetRequest($score, $name__ilike, $brand_name__ilike, $order_by, $limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\LimitOffsetPageProductDescriptionInDB' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\LimitOffsetPageProductDescriptionInDB', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\LimitOffsetPageProductDescriptionInDB';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LimitOffsetPageProductDescriptionInDB',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation readAllProductDescriptionsApiV1ProductAllGetAsync
     *
     * Read All Product Descriptions
     *
     * @param  int $score (optional)
     * @param  string $name__ilike (optional)
     * @param  string $brand_name__ilike (optional)
     * @param  string $order_by (optional, default to 'score,name,brand_name,created_at,brand_description_bool,product_history_description_bool,technologies_bool')
     * @param  int $limit (optional, default to 50)
     * @param  int $offset (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function readAllProductDescriptionsApiV1ProductAllGetAsync($score = null, $name__ilike = null, $brand_name__ilike = null, $order_by = 'score,name,brand_name,created_at,brand_description_bool,product_history_description_bool,technologies_bool', $limit = 50, $offset = 0)
    {
        return $this->readAllProductDescriptionsApiV1ProductAllGetAsyncWithHttpInfo($score, $name__ilike, $brand_name__ilike, $order_by, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation readAllProductDescriptionsApiV1ProductAllGetAsyncWithHttpInfo
     *
     * Read All Product Descriptions
     *
     * @param  int $score (optional)
     * @param  string $name__ilike (optional)
     * @param  string $brand_name__ilike (optional)
     * @param  string $order_by (optional, default to 'score,name,brand_name,created_at,brand_description_bool,product_history_description_bool,technologies_bool')
     * @param  int $limit (optional, default to 50)
     * @param  int $offset (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function readAllProductDescriptionsApiV1ProductAllGetAsyncWithHttpInfo($score = null, $name__ilike = null, $brand_name__ilike = null, $order_by = 'score,name,brand_name,created_at,brand_description_bool,product_history_description_bool,technologies_bool', $limit = 50, $offset = 0)
    {
        $returnType = '\OpenAPI\Client\Model\LimitOffsetPageProductDescriptionInDB';
        $request = $this->readAllProductDescriptionsApiV1ProductAllGetRequest($score, $name__ilike, $brand_name__ilike, $order_by, $limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'readAllProductDescriptionsApiV1ProductAllGet'
     *
     * @param  int $score (optional)
     * @param  string $name__ilike (optional)
     * @param  string $brand_name__ilike (optional)
     * @param  string $order_by (optional, default to 'score,name,brand_name,created_at,brand_description_bool,product_history_description_bool,technologies_bool')
     * @param  int $limit (optional, default to 50)
     * @param  int $offset (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function readAllProductDescriptionsApiV1ProductAllGetRequest($score = null, $name__ilike = null, $brand_name__ilike = null, $order_by = 'score,name,brand_name,created_at,brand_description_bool,product_history_description_bool,technologies_bool', $limit = 50, $offset = 0)
    {
        if ($limit !== null && $limit > 100) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ProductApi.readAllProductDescriptionsApiV1ProductAllGet, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ProductApi.readAllProductDescriptionsApiV1ProductAllGet, must be bigger than or equal to 1.');
        }

        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling ProductApi.readAllProductDescriptionsApiV1ProductAllGet, must be bigger than or equal to 0.');
        }


        $resourcePath = '/api/v1/product/all';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($score !== null) {
            if('form' === 'form' && is_array($score)) {
                foreach($score as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['score'] = $score;
            }
        }
        // query params
        if ($name__ilike !== null) {
            if('form' === 'form' && is_array($name__ilike)) {
                foreach($name__ilike as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['name__ilike'] = $name__ilike;
            }
        }
        // query params
        if ($brand_name__ilike !== null) {
            if('form' === 'form' && is_array($brand_name__ilike)) {
                foreach($brand_name__ilike as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['brand_name__ilike'] = $brand_name__ilike;
            }
        }
        // query params
        if ($order_by !== null) {
            if('form' === 'form' && is_array($order_by)) {
                foreach($order_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['order_by'] = $order_by;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation readUserProductDescriptionsApiV1ProductMyReviewsGet
     *
     * Read User Product Descriptions
     *
     * @param  int $score score (optional)
     * @param  string $name__ilike name__ilike (optional)
     * @param  string $brand_name__ilike brand_name__ilike (optional)
     * @param  string $order_by order_by (optional, default to 'score,name,brand_name,created_at,brand_description_bool,product_history_description_bool,technologies_bool')
     * @param  int $limit limit (optional, default to 50)
     * @param  int $offset offset (optional, default to 0)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\LimitOffsetPageProductDescriptionInDB|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function readUserProductDescriptionsApiV1ProductMyReviewsGet($score = null, $name__ilike = null, $brand_name__ilike = null, $order_by = 'score,name,brand_name,created_at,brand_description_bool,product_history_description_bool,technologies_bool', $limit = 50, $offset = 0)
    {
        list($response) = $this->readUserProductDescriptionsApiV1ProductMyReviewsGetWithHttpInfo($score, $name__ilike, $brand_name__ilike, $order_by, $limit, $offset);
        return $response;
    }

    /**
     * Operation readUserProductDescriptionsApiV1ProductMyReviewsGetWithHttpInfo
     *
     * Read User Product Descriptions
     *
     * @param  int $score (optional)
     * @param  string $name__ilike (optional)
     * @param  string $brand_name__ilike (optional)
     * @param  string $order_by (optional, default to 'score,name,brand_name,created_at,brand_description_bool,product_history_description_bool,technologies_bool')
     * @param  int $limit (optional, default to 50)
     * @param  int $offset (optional, default to 0)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LimitOffsetPageProductDescriptionInDB|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function readUserProductDescriptionsApiV1ProductMyReviewsGetWithHttpInfo($score = null, $name__ilike = null, $brand_name__ilike = null, $order_by = 'score,name,brand_name,created_at,brand_description_bool,product_history_description_bool,technologies_bool', $limit = 50, $offset = 0)
    {
        $request = $this->readUserProductDescriptionsApiV1ProductMyReviewsGetRequest($score, $name__ilike, $brand_name__ilike, $order_by, $limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\LimitOffsetPageProductDescriptionInDB' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\LimitOffsetPageProductDescriptionInDB', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\LimitOffsetPageProductDescriptionInDB';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LimitOffsetPageProductDescriptionInDB',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation readUserProductDescriptionsApiV1ProductMyReviewsGetAsync
     *
     * Read User Product Descriptions
     *
     * @param  int $score (optional)
     * @param  string $name__ilike (optional)
     * @param  string $brand_name__ilike (optional)
     * @param  string $order_by (optional, default to 'score,name,brand_name,created_at,brand_description_bool,product_history_description_bool,technologies_bool')
     * @param  int $limit (optional, default to 50)
     * @param  int $offset (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function readUserProductDescriptionsApiV1ProductMyReviewsGetAsync($score = null, $name__ilike = null, $brand_name__ilike = null, $order_by = 'score,name,brand_name,created_at,brand_description_bool,product_history_description_bool,technologies_bool', $limit = 50, $offset = 0)
    {
        return $this->readUserProductDescriptionsApiV1ProductMyReviewsGetAsyncWithHttpInfo($score, $name__ilike, $brand_name__ilike, $order_by, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation readUserProductDescriptionsApiV1ProductMyReviewsGetAsyncWithHttpInfo
     *
     * Read User Product Descriptions
     *
     * @param  int $score (optional)
     * @param  string $name__ilike (optional)
     * @param  string $brand_name__ilike (optional)
     * @param  string $order_by (optional, default to 'score,name,brand_name,created_at,brand_description_bool,product_history_description_bool,technologies_bool')
     * @param  int $limit (optional, default to 50)
     * @param  int $offset (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function readUserProductDescriptionsApiV1ProductMyReviewsGetAsyncWithHttpInfo($score = null, $name__ilike = null, $brand_name__ilike = null, $order_by = 'score,name,brand_name,created_at,brand_description_bool,product_history_description_bool,technologies_bool', $limit = 50, $offset = 0)
    {
        $returnType = '\OpenAPI\Client\Model\LimitOffsetPageProductDescriptionInDB';
        $request = $this->readUserProductDescriptionsApiV1ProductMyReviewsGetRequest($score, $name__ilike, $brand_name__ilike, $order_by, $limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'readUserProductDescriptionsApiV1ProductMyReviewsGet'
     *
     * @param  int $score (optional)
     * @param  string $name__ilike (optional)
     * @param  string $brand_name__ilike (optional)
     * @param  string $order_by (optional, default to 'score,name,brand_name,created_at,brand_description_bool,product_history_description_bool,technologies_bool')
     * @param  int $limit (optional, default to 50)
     * @param  int $offset (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function readUserProductDescriptionsApiV1ProductMyReviewsGetRequest($score = null, $name__ilike = null, $brand_name__ilike = null, $order_by = 'score,name,brand_name,created_at,brand_description_bool,product_history_description_bool,technologies_bool', $limit = 50, $offset = 0)
    {
        if ($limit !== null && $limit > 100) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ProductApi.readUserProductDescriptionsApiV1ProductMyReviewsGet, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ProductApi.readUserProductDescriptionsApiV1ProductMyReviewsGet, must be bigger than or equal to 1.');
        }

        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling ProductApi.readUserProductDescriptionsApiV1ProductMyReviewsGet, must be bigger than or equal to 0.');
        }


        $resourcePath = '/api/v1/product/my-reviews';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($score !== null) {
            if('form' === 'form' && is_array($score)) {
                foreach($score as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['score'] = $score;
            }
        }
        // query params
        if ($name__ilike !== null) {
            if('form' === 'form' && is_array($name__ilike)) {
                foreach($name__ilike as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['name__ilike'] = $name__ilike;
            }
        }
        // query params
        if ($brand_name__ilike !== null) {
            if('form' === 'form' && is_array($brand_name__ilike)) {
                foreach($brand_name__ilike as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['brand_name__ilike'] = $brand_name__ilike;
            }
        }
        // query params
        if ($order_by !== null) {
            if('form' === 'form' && is_array($order_by)) {
                foreach($order_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['order_by'] = $order_by;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation regenerateBrandDescriptionApiV1ProductRegenerateBrandDescriptionDescriptionIdPost
     *
     * Regenerate Brand Description
     *
     * @param  string $description_id description_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BrandDescription|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function regenerateBrandDescriptionApiV1ProductRegenerateBrandDescriptionDescriptionIdPost($description_id)
    {
        list($response) = $this->regenerateBrandDescriptionApiV1ProductRegenerateBrandDescriptionDescriptionIdPostWithHttpInfo($description_id);
        return $response;
    }

    /**
     * Operation regenerateBrandDescriptionApiV1ProductRegenerateBrandDescriptionDescriptionIdPostWithHttpInfo
     *
     * Regenerate Brand Description
     *
     * @param  string $description_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BrandDescription|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function regenerateBrandDescriptionApiV1ProductRegenerateBrandDescriptionDescriptionIdPostWithHttpInfo($description_id)
    {
        $request = $this->regenerateBrandDescriptionApiV1ProductRegenerateBrandDescriptionDescriptionIdPostRequest($description_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BrandDescription' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BrandDescription', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BrandDescription';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BrandDescription',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation regenerateBrandDescriptionApiV1ProductRegenerateBrandDescriptionDescriptionIdPostAsync
     *
     * Regenerate Brand Description
     *
     * @param  string $description_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function regenerateBrandDescriptionApiV1ProductRegenerateBrandDescriptionDescriptionIdPostAsync($description_id)
    {
        return $this->regenerateBrandDescriptionApiV1ProductRegenerateBrandDescriptionDescriptionIdPostAsyncWithHttpInfo($description_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation regenerateBrandDescriptionApiV1ProductRegenerateBrandDescriptionDescriptionIdPostAsyncWithHttpInfo
     *
     * Regenerate Brand Description
     *
     * @param  string $description_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function regenerateBrandDescriptionApiV1ProductRegenerateBrandDescriptionDescriptionIdPostAsyncWithHttpInfo($description_id)
    {
        $returnType = '\OpenAPI\Client\Model\BrandDescription';
        $request = $this->regenerateBrandDescriptionApiV1ProductRegenerateBrandDescriptionDescriptionIdPostRequest($description_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'regenerateBrandDescriptionApiV1ProductRegenerateBrandDescriptionDescriptionIdPost'
     *
     * @param  string $description_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function regenerateBrandDescriptionApiV1ProductRegenerateBrandDescriptionDescriptionIdPostRequest($description_id)
    {
        // verify the required parameter 'description_id' is set
        if ($description_id === null || (is_array($description_id) && count($description_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $description_id when calling regenerateBrandDescriptionApiV1ProductRegenerateBrandDescriptionDescriptionIdPost'
            );
        }

        $resourcePath = '/api/v1/product/regenerate-brand-description/{description_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($description_id !== null) {
            $resourcePath = str_replace(
                '{' . 'description_id' . '}',
                ObjectSerializer::toPathValue($description_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation regenerateDescriptionApiV1ProductRegenerateDescriptionDescriptionIdPost
     *
     * Regenerate Description
     *
     * @param  string $description_id description_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProductDescription|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function regenerateDescriptionApiV1ProductRegenerateDescriptionDescriptionIdPost($description_id)
    {
        list($response) = $this->regenerateDescriptionApiV1ProductRegenerateDescriptionDescriptionIdPostWithHttpInfo($description_id);
        return $response;
    }

    /**
     * Operation regenerateDescriptionApiV1ProductRegenerateDescriptionDescriptionIdPostWithHttpInfo
     *
     * Regenerate Description
     *
     * @param  string $description_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProductDescription|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function regenerateDescriptionApiV1ProductRegenerateDescriptionDescriptionIdPostWithHttpInfo($description_id)
    {
        $request = $this->regenerateDescriptionApiV1ProductRegenerateDescriptionDescriptionIdPostRequest($description_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ProductDescription' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ProductDescription', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ProductDescription';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProductDescription',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation regenerateDescriptionApiV1ProductRegenerateDescriptionDescriptionIdPostAsync
     *
     * Regenerate Description
     *
     * @param  string $description_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function regenerateDescriptionApiV1ProductRegenerateDescriptionDescriptionIdPostAsync($description_id)
    {
        return $this->regenerateDescriptionApiV1ProductRegenerateDescriptionDescriptionIdPostAsyncWithHttpInfo($description_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation regenerateDescriptionApiV1ProductRegenerateDescriptionDescriptionIdPostAsyncWithHttpInfo
     *
     * Regenerate Description
     *
     * @param  string $description_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function regenerateDescriptionApiV1ProductRegenerateDescriptionDescriptionIdPostAsyncWithHttpInfo($description_id)
    {
        $returnType = '\OpenAPI\Client\Model\ProductDescription';
        $request = $this->regenerateDescriptionApiV1ProductRegenerateDescriptionDescriptionIdPostRequest($description_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'regenerateDescriptionApiV1ProductRegenerateDescriptionDescriptionIdPost'
     *
     * @param  string $description_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function regenerateDescriptionApiV1ProductRegenerateDescriptionDescriptionIdPostRequest($description_id)
    {
        // verify the required parameter 'description_id' is set
        if ($description_id === null || (is_array($description_id) && count($description_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $description_id when calling regenerateDescriptionApiV1ProductRegenerateDescriptionDescriptionIdPost'
            );
        }

        $resourcePath = '/api/v1/product/regenerate-description/{description_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($description_id !== null) {
            $resourcePath = str_replace(
                '{' . 'description_id' . '}',
                ObjectSerializer::toPathValue($description_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation regenerateEmptyApiV1ProductRegenerateEmptyDescriptionDescriptionIdPost
     *
     * Regenerate Empty
     *
     * @param  string $description_id description_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function regenerateEmptyApiV1ProductRegenerateEmptyDescriptionDescriptionIdPost($description_id)
    {
        list($response) = $this->regenerateEmptyApiV1ProductRegenerateEmptyDescriptionDescriptionIdPostWithHttpInfo($description_id);
        return $response;
    }

    /**
     * Operation regenerateEmptyApiV1ProductRegenerateEmptyDescriptionDescriptionIdPostWithHttpInfo
     *
     * Regenerate Empty
     *
     * @param  string $description_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function regenerateEmptyApiV1ProductRegenerateEmptyDescriptionDescriptionIdPostWithHttpInfo($description_id)
    {
        $request = $this->regenerateEmptyApiV1ProductRegenerateEmptyDescriptionDescriptionIdPostRequest($description_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation regenerateEmptyApiV1ProductRegenerateEmptyDescriptionDescriptionIdPostAsync
     *
     * Regenerate Empty
     *
     * @param  string $description_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function regenerateEmptyApiV1ProductRegenerateEmptyDescriptionDescriptionIdPostAsync($description_id)
    {
        return $this->regenerateEmptyApiV1ProductRegenerateEmptyDescriptionDescriptionIdPostAsyncWithHttpInfo($description_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation regenerateEmptyApiV1ProductRegenerateEmptyDescriptionDescriptionIdPostAsyncWithHttpInfo
     *
     * Regenerate Empty
     *
     * @param  string $description_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function regenerateEmptyApiV1ProductRegenerateEmptyDescriptionDescriptionIdPostAsyncWithHttpInfo($description_id)
    {
        $returnType = 'mixed';
        $request = $this->regenerateEmptyApiV1ProductRegenerateEmptyDescriptionDescriptionIdPostRequest($description_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'regenerateEmptyApiV1ProductRegenerateEmptyDescriptionDescriptionIdPost'
     *
     * @param  string $description_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function regenerateEmptyApiV1ProductRegenerateEmptyDescriptionDescriptionIdPostRequest($description_id)
    {
        // verify the required parameter 'description_id' is set
        if ($description_id === null || (is_array($description_id) && count($description_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $description_id when calling regenerateEmptyApiV1ProductRegenerateEmptyDescriptionDescriptionIdPost'
            );
        }

        $resourcePath = '/api/v1/product/regenerate-empty-description/{description_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($description_id !== null) {
            $resourcePath = str_replace(
                '{' . 'description_id' . '}',
                ObjectSerializer::toPathValue($description_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation regenerateHistoryDescriptionApiV1ProductRegenerateHistoryDescriptionDescriptionIdPost
     *
     * Regenerate History Description
     *
     * @param  string $description_id description_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProductHistory|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function regenerateHistoryDescriptionApiV1ProductRegenerateHistoryDescriptionDescriptionIdPost($description_id)
    {
        list($response) = $this->regenerateHistoryDescriptionApiV1ProductRegenerateHistoryDescriptionDescriptionIdPostWithHttpInfo($description_id);
        return $response;
    }

    /**
     * Operation regenerateHistoryDescriptionApiV1ProductRegenerateHistoryDescriptionDescriptionIdPostWithHttpInfo
     *
     * Regenerate History Description
     *
     * @param  string $description_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProductHistory|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function regenerateHistoryDescriptionApiV1ProductRegenerateHistoryDescriptionDescriptionIdPostWithHttpInfo($description_id)
    {
        $request = $this->regenerateHistoryDescriptionApiV1ProductRegenerateHistoryDescriptionDescriptionIdPostRequest($description_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ProductHistory' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ProductHistory', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ProductHistory';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProductHistory',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation regenerateHistoryDescriptionApiV1ProductRegenerateHistoryDescriptionDescriptionIdPostAsync
     *
     * Regenerate History Description
     *
     * @param  string $description_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function regenerateHistoryDescriptionApiV1ProductRegenerateHistoryDescriptionDescriptionIdPostAsync($description_id)
    {
        return $this->regenerateHistoryDescriptionApiV1ProductRegenerateHistoryDescriptionDescriptionIdPostAsyncWithHttpInfo($description_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation regenerateHistoryDescriptionApiV1ProductRegenerateHistoryDescriptionDescriptionIdPostAsyncWithHttpInfo
     *
     * Regenerate History Description
     *
     * @param  string $description_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function regenerateHistoryDescriptionApiV1ProductRegenerateHistoryDescriptionDescriptionIdPostAsyncWithHttpInfo($description_id)
    {
        $returnType = '\OpenAPI\Client\Model\ProductHistory';
        $request = $this->regenerateHistoryDescriptionApiV1ProductRegenerateHistoryDescriptionDescriptionIdPostRequest($description_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'regenerateHistoryDescriptionApiV1ProductRegenerateHistoryDescriptionDescriptionIdPost'
     *
     * @param  string $description_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function regenerateHistoryDescriptionApiV1ProductRegenerateHistoryDescriptionDescriptionIdPostRequest($description_id)
    {
        // verify the required parameter 'description_id' is set
        if ($description_id === null || (is_array($description_id) && count($description_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $description_id when calling regenerateHistoryDescriptionApiV1ProductRegenerateHistoryDescriptionDescriptionIdPost'
            );
        }

        $resourcePath = '/api/v1/product/regenerate-history-description/{description_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($description_id !== null) {
            $resourcePath = str_replace(
                '{' . 'description_id' . '}',
                ObjectSerializer::toPathValue($description_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation regenerateTechnologyApiV1ProductRegenerateTechnologiesDescriptionDescriptionIdPost
     *
     * Regenerate Technology
     *
     * @param  string $description_id description_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Technologies|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function regenerateTechnologyApiV1ProductRegenerateTechnologiesDescriptionDescriptionIdPost($description_id)
    {
        list($response) = $this->regenerateTechnologyApiV1ProductRegenerateTechnologiesDescriptionDescriptionIdPostWithHttpInfo($description_id);
        return $response;
    }

    /**
     * Operation regenerateTechnologyApiV1ProductRegenerateTechnologiesDescriptionDescriptionIdPostWithHttpInfo
     *
     * Regenerate Technology
     *
     * @param  string $description_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Technologies|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function regenerateTechnologyApiV1ProductRegenerateTechnologiesDescriptionDescriptionIdPostWithHttpInfo($description_id)
    {
        $request = $this->regenerateTechnologyApiV1ProductRegenerateTechnologiesDescriptionDescriptionIdPostRequest($description_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Technologies' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Technologies', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Technologies';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Technologies',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation regenerateTechnologyApiV1ProductRegenerateTechnologiesDescriptionDescriptionIdPostAsync
     *
     * Regenerate Technology
     *
     * @param  string $description_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function regenerateTechnologyApiV1ProductRegenerateTechnologiesDescriptionDescriptionIdPostAsync($description_id)
    {
        return $this->regenerateTechnologyApiV1ProductRegenerateTechnologiesDescriptionDescriptionIdPostAsyncWithHttpInfo($description_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation regenerateTechnologyApiV1ProductRegenerateTechnologiesDescriptionDescriptionIdPostAsyncWithHttpInfo
     *
     * Regenerate Technology
     *
     * @param  string $description_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function regenerateTechnologyApiV1ProductRegenerateTechnologiesDescriptionDescriptionIdPostAsyncWithHttpInfo($description_id)
    {
        $returnType = '\OpenAPI\Client\Model\Technologies';
        $request = $this->regenerateTechnologyApiV1ProductRegenerateTechnologiesDescriptionDescriptionIdPostRequest($description_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'regenerateTechnologyApiV1ProductRegenerateTechnologiesDescriptionDescriptionIdPost'
     *
     * @param  string $description_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function regenerateTechnologyApiV1ProductRegenerateTechnologiesDescriptionDescriptionIdPostRequest($description_id)
    {
        // verify the required parameter 'description_id' is set
        if ($description_id === null || (is_array($description_id) && count($description_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $description_id when calling regenerateTechnologyApiV1ProductRegenerateTechnologiesDescriptionDescriptionIdPost'
            );
        }

        $resourcePath = '/api/v1/product/regenerate-technologies-description/{description_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($description_id !== null) {
            $resourcePath = str_replace(
                '{' . 'description_id' . '}',
                ObjectSerializer::toPathValue($description_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reviewBrandDescriptionApiV1ProductBrandDescriptionIdReviewPost
     *
     * Review Brand Description
     *
     * @param  string $description_id description_id (required)
     * @param  \OpenAPI\Client\Model\BrandDescriptionUpdate $brand_description_update brand_description_update (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BrandDescriptionUpdate|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function reviewBrandDescriptionApiV1ProductBrandDescriptionIdReviewPost($description_id, $brand_description_update)
    {
        list($response) = $this->reviewBrandDescriptionApiV1ProductBrandDescriptionIdReviewPostWithHttpInfo($description_id, $brand_description_update);
        return $response;
    }

    /**
     * Operation reviewBrandDescriptionApiV1ProductBrandDescriptionIdReviewPostWithHttpInfo
     *
     * Review Brand Description
     *
     * @param  string $description_id (required)
     * @param  \OpenAPI\Client\Model\BrandDescriptionUpdate $brand_description_update (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BrandDescriptionUpdate|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function reviewBrandDescriptionApiV1ProductBrandDescriptionIdReviewPostWithHttpInfo($description_id, $brand_description_update)
    {
        $request = $this->reviewBrandDescriptionApiV1ProductBrandDescriptionIdReviewPostRequest($description_id, $brand_description_update);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BrandDescriptionUpdate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BrandDescriptionUpdate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BrandDescriptionUpdate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BrandDescriptionUpdate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reviewBrandDescriptionApiV1ProductBrandDescriptionIdReviewPostAsync
     *
     * Review Brand Description
     *
     * @param  string $description_id (required)
     * @param  \OpenAPI\Client\Model\BrandDescriptionUpdate $brand_description_update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reviewBrandDescriptionApiV1ProductBrandDescriptionIdReviewPostAsync($description_id, $brand_description_update)
    {
        return $this->reviewBrandDescriptionApiV1ProductBrandDescriptionIdReviewPostAsyncWithHttpInfo($description_id, $brand_description_update)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reviewBrandDescriptionApiV1ProductBrandDescriptionIdReviewPostAsyncWithHttpInfo
     *
     * Review Brand Description
     *
     * @param  string $description_id (required)
     * @param  \OpenAPI\Client\Model\BrandDescriptionUpdate $brand_description_update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reviewBrandDescriptionApiV1ProductBrandDescriptionIdReviewPostAsyncWithHttpInfo($description_id, $brand_description_update)
    {
        $returnType = '\OpenAPI\Client\Model\BrandDescriptionUpdate';
        $request = $this->reviewBrandDescriptionApiV1ProductBrandDescriptionIdReviewPostRequest($description_id, $brand_description_update);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reviewBrandDescriptionApiV1ProductBrandDescriptionIdReviewPost'
     *
     * @param  string $description_id (required)
     * @param  \OpenAPI\Client\Model\BrandDescriptionUpdate $brand_description_update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function reviewBrandDescriptionApiV1ProductBrandDescriptionIdReviewPostRequest($description_id, $brand_description_update)
    {
        // verify the required parameter 'description_id' is set
        if ($description_id === null || (is_array($description_id) && count($description_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $description_id when calling reviewBrandDescriptionApiV1ProductBrandDescriptionIdReviewPost'
            );
        }
        // verify the required parameter 'brand_description_update' is set
        if ($brand_description_update === null || (is_array($brand_description_update) && count($brand_description_update) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $brand_description_update when calling reviewBrandDescriptionApiV1ProductBrandDescriptionIdReviewPost'
            );
        }

        $resourcePath = '/api/v1/product/brand/{description_id}/review';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($description_id !== null) {
            $resourcePath = str_replace(
                '{' . 'description_id' . '}',
                ObjectSerializer::toPathValue($description_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($brand_description_update)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($brand_description_update));
            } else {
                $httpBody = $brand_description_update;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reviewDescriptionApiV1ProductDescriptionDescriptionIdReviewPost
     *
     * Review Description
     *
     * @param  string $description_id description_id (required)
     * @param  \OpenAPI\Client\Model\ProductDescriptionUpdate $product_description_update product_description_update (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProductDescriptionUpdate|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function reviewDescriptionApiV1ProductDescriptionDescriptionIdReviewPost($description_id, $product_description_update)
    {
        list($response) = $this->reviewDescriptionApiV1ProductDescriptionDescriptionIdReviewPostWithHttpInfo($description_id, $product_description_update);
        return $response;
    }

    /**
     * Operation reviewDescriptionApiV1ProductDescriptionDescriptionIdReviewPostWithHttpInfo
     *
     * Review Description
     *
     * @param  string $description_id (required)
     * @param  \OpenAPI\Client\Model\ProductDescriptionUpdate $product_description_update (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProductDescriptionUpdate|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function reviewDescriptionApiV1ProductDescriptionDescriptionIdReviewPostWithHttpInfo($description_id, $product_description_update)
    {
        $request = $this->reviewDescriptionApiV1ProductDescriptionDescriptionIdReviewPostRequest($description_id, $product_description_update);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ProductDescriptionUpdate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ProductDescriptionUpdate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ProductDescriptionUpdate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProductDescriptionUpdate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reviewDescriptionApiV1ProductDescriptionDescriptionIdReviewPostAsync
     *
     * Review Description
     *
     * @param  string $description_id (required)
     * @param  \OpenAPI\Client\Model\ProductDescriptionUpdate $product_description_update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reviewDescriptionApiV1ProductDescriptionDescriptionIdReviewPostAsync($description_id, $product_description_update)
    {
        return $this->reviewDescriptionApiV1ProductDescriptionDescriptionIdReviewPostAsyncWithHttpInfo($description_id, $product_description_update)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reviewDescriptionApiV1ProductDescriptionDescriptionIdReviewPostAsyncWithHttpInfo
     *
     * Review Description
     *
     * @param  string $description_id (required)
     * @param  \OpenAPI\Client\Model\ProductDescriptionUpdate $product_description_update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reviewDescriptionApiV1ProductDescriptionDescriptionIdReviewPostAsyncWithHttpInfo($description_id, $product_description_update)
    {
        $returnType = '\OpenAPI\Client\Model\ProductDescriptionUpdate';
        $request = $this->reviewDescriptionApiV1ProductDescriptionDescriptionIdReviewPostRequest($description_id, $product_description_update);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reviewDescriptionApiV1ProductDescriptionDescriptionIdReviewPost'
     *
     * @param  string $description_id (required)
     * @param  \OpenAPI\Client\Model\ProductDescriptionUpdate $product_description_update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function reviewDescriptionApiV1ProductDescriptionDescriptionIdReviewPostRequest($description_id, $product_description_update)
    {
        // verify the required parameter 'description_id' is set
        if ($description_id === null || (is_array($description_id) && count($description_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $description_id when calling reviewDescriptionApiV1ProductDescriptionDescriptionIdReviewPost'
            );
        }
        // verify the required parameter 'product_description_update' is set
        if ($product_description_update === null || (is_array($product_description_update) && count($product_description_update) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_description_update when calling reviewDescriptionApiV1ProductDescriptionDescriptionIdReviewPost'
            );
        }

        $resourcePath = '/api/v1/product/description/{description_id}/review';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($description_id !== null) {
            $resourcePath = str_replace(
                '{' . 'description_id' . '}',
                ObjectSerializer::toPathValue($description_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($product_description_update)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($product_description_update));
            } else {
                $httpBody = $product_description_update;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reviewHistoryDescriptionApiV1ProductHistoryDescriptionIdReviewPost
     *
     * Review History Description
     *
     * @param  string $description_id description_id (required)
     * @param  \OpenAPI\Client\Model\ProductHistoryUpdate $product_history_update product_history_update (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProductHistoryUpdate|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function reviewHistoryDescriptionApiV1ProductHistoryDescriptionIdReviewPost($description_id, $product_history_update)
    {
        list($response) = $this->reviewHistoryDescriptionApiV1ProductHistoryDescriptionIdReviewPostWithHttpInfo($description_id, $product_history_update);
        return $response;
    }

    /**
     * Operation reviewHistoryDescriptionApiV1ProductHistoryDescriptionIdReviewPostWithHttpInfo
     *
     * Review History Description
     *
     * @param  string $description_id (required)
     * @param  \OpenAPI\Client\Model\ProductHistoryUpdate $product_history_update (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProductHistoryUpdate|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function reviewHistoryDescriptionApiV1ProductHistoryDescriptionIdReviewPostWithHttpInfo($description_id, $product_history_update)
    {
        $request = $this->reviewHistoryDescriptionApiV1ProductHistoryDescriptionIdReviewPostRequest($description_id, $product_history_update);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ProductHistoryUpdate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ProductHistoryUpdate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ProductHistoryUpdate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProductHistoryUpdate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reviewHistoryDescriptionApiV1ProductHistoryDescriptionIdReviewPostAsync
     *
     * Review History Description
     *
     * @param  string $description_id (required)
     * @param  \OpenAPI\Client\Model\ProductHistoryUpdate $product_history_update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reviewHistoryDescriptionApiV1ProductHistoryDescriptionIdReviewPostAsync($description_id, $product_history_update)
    {
        return $this->reviewHistoryDescriptionApiV1ProductHistoryDescriptionIdReviewPostAsyncWithHttpInfo($description_id, $product_history_update)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reviewHistoryDescriptionApiV1ProductHistoryDescriptionIdReviewPostAsyncWithHttpInfo
     *
     * Review History Description
     *
     * @param  string $description_id (required)
     * @param  \OpenAPI\Client\Model\ProductHistoryUpdate $product_history_update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reviewHistoryDescriptionApiV1ProductHistoryDescriptionIdReviewPostAsyncWithHttpInfo($description_id, $product_history_update)
    {
        $returnType = '\OpenAPI\Client\Model\ProductHistoryUpdate';
        $request = $this->reviewHistoryDescriptionApiV1ProductHistoryDescriptionIdReviewPostRequest($description_id, $product_history_update);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reviewHistoryDescriptionApiV1ProductHistoryDescriptionIdReviewPost'
     *
     * @param  string $description_id (required)
     * @param  \OpenAPI\Client\Model\ProductHistoryUpdate $product_history_update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function reviewHistoryDescriptionApiV1ProductHistoryDescriptionIdReviewPostRequest($description_id, $product_history_update)
    {
        // verify the required parameter 'description_id' is set
        if ($description_id === null || (is_array($description_id) && count($description_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $description_id when calling reviewHistoryDescriptionApiV1ProductHistoryDescriptionIdReviewPost'
            );
        }
        // verify the required parameter 'product_history_update' is set
        if ($product_history_update === null || (is_array($product_history_update) && count($product_history_update) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_history_update when calling reviewHistoryDescriptionApiV1ProductHistoryDescriptionIdReviewPost'
            );
        }

        $resourcePath = '/api/v1/product/history/{description_id}/review';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($description_id !== null) {
            $resourcePath = str_replace(
                '{' . 'description_id' . '}',
                ObjectSerializer::toPathValue($description_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($product_history_update)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($product_history_update));
            } else {
                $httpBody = $product_history_update;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation translateDescriptionApiV1ProductTranslateDescriptionDescriptionIdPost
     *
     * Translate Description
     *
     * @param  string $description_id description_id (required)
     * @param  string $language language (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function translateDescriptionApiV1ProductTranslateDescriptionDescriptionIdPost($description_id, $language)
    {
        list($response) = $this->translateDescriptionApiV1ProductTranslateDescriptionDescriptionIdPostWithHttpInfo($description_id, $language);
        return $response;
    }

    /**
     * Operation translateDescriptionApiV1ProductTranslateDescriptionDescriptionIdPostWithHttpInfo
     *
     * Translate Description
     *
     * @param  string $description_id (required)
     * @param  string $language (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function translateDescriptionApiV1ProductTranslateDescriptionDescriptionIdPostWithHttpInfo($description_id, $language)
    {
        $request = $this->translateDescriptionApiV1ProductTranslateDescriptionDescriptionIdPostRequest($description_id, $language);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation translateDescriptionApiV1ProductTranslateDescriptionDescriptionIdPostAsync
     *
     * Translate Description
     *
     * @param  string $description_id (required)
     * @param  string $language (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function translateDescriptionApiV1ProductTranslateDescriptionDescriptionIdPostAsync($description_id, $language)
    {
        return $this->translateDescriptionApiV1ProductTranslateDescriptionDescriptionIdPostAsyncWithHttpInfo($description_id, $language)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation translateDescriptionApiV1ProductTranslateDescriptionDescriptionIdPostAsyncWithHttpInfo
     *
     * Translate Description
     *
     * @param  string $description_id (required)
     * @param  string $language (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function translateDescriptionApiV1ProductTranslateDescriptionDescriptionIdPostAsyncWithHttpInfo($description_id, $language)
    {
        $returnType = 'mixed';
        $request = $this->translateDescriptionApiV1ProductTranslateDescriptionDescriptionIdPostRequest($description_id, $language);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'translateDescriptionApiV1ProductTranslateDescriptionDescriptionIdPost'
     *
     * @param  string $description_id (required)
     * @param  string $language (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function translateDescriptionApiV1ProductTranslateDescriptionDescriptionIdPostRequest($description_id, $language)
    {
        // verify the required parameter 'description_id' is set
        if ($description_id === null || (is_array($description_id) && count($description_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $description_id when calling translateDescriptionApiV1ProductTranslateDescriptionDescriptionIdPost'
            );
        }
        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling translateDescriptionApiV1ProductTranslateDescriptionDescriptionIdPost'
            );
        }

        $resourcePath = '/api/v1/product/translate-description/{description_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($language !== null) {
            if('form' === 'form' && is_array($language)) {
                foreach($language as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['language'] = $language;
            }
        }


        // path params
        if ($description_id !== null) {
            $resourcePath = str_replace(
                '{' . 'description_id' . '}',
                ObjectSerializer::toPathValue($description_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
